I"kÖ<p>In this post, I show how to control <strong>any</strong> number of DC Motors to move forward or backward using the BeagleBone and the driver <a href="https://www.sparkfun.com/datasheets/Robotics/L298_H_Bridge.pdf">L298N</a>. In practice, this driver can be found in a popular red-colored module that has been designed to make it easy to play and interact with DC motors as this <a href="https://lastminuteengineers.com/l298n-dc-stepper-driver-arduino-tutorial/">tutorial</a> shows.</p>

<p>In the <a href="/Post52-BeagleBone_L298N_Drive2Motors/">last entry</a>, you can read about how to drive a pair of DC motors with this driver.</p>

<p>The remarkable aspect is the use of <strong>C++ vectors</strong> to drive simultaneously the number of DC motors the user wants in the same rotation direction. You have to take into account that the L298N driver only can manage 2 DC motors. If you need more, you have to add more drivers. In this post, I show how to use the STL <code class="language-plaintext highlighter-rouge">std::vector</code> to drive 2 DC motors.</p>

<p>It is important to remember that the logic voltage for the BeagleBone is <font color="red">3.3V</font>. If the user provides a greater voltage, the BeagleBone could be damaged.</p>

<h2 id="circuit-and-components">Circuit and components</h2>

<p>The circuit can be seen in Figure 1. It consists of a L298N driver module , 2 low voltage DC Motors, batteries, and the BeagleBone.</p>

<figure style="text-align: center; 
              margin-left: auto; 
              margin-right: auto;">
    <img src="../assets/images/Post53/Circuit.png" alt="circuit.png" width="100%" />
  <figcaption>
    Figure 1: Circuit to drive a pair of DC motor with the L298N driver.
  </figcaption>
</figure>

<p>The components are:</p>
<ul>
  <li>1 DC Motor driver TB6612FNG</li>
  <li>2 DC Motor 3.0 - 6.0V</li>
  <li>4 AA Batteries</li>
  <li>1 Protoboard mini</li>
  <li>Jumpers male-male to make the connections</li>
</ul>

<p>The pins used for control the driver and the motors are:</p>
<ul>
  <li>The pins used for control the <strong>motor A</strong> are:
    <ul>
      <li>GPIO <strong>P8_12</strong> and <strong>P8_14</strong> to control the motor rotation direction</li>
      <li>PWM <strong>P8_13</strong> to control the speed</li>
    </ul>
  </li>
  <li>The pins used for control the <strong>motor B</strong> are:
    <ul>
      <li>GPIO <strong>P8_17</strong> and <strong>P8_18</strong> to control the motor rotation direction</li>
      <li>PWM <strong>P8_19</strong> to control the speed</li>
    </ul>
  </li>
</ul>

<h2 id="coding">Coding</h2>

<p>First, two <code class="language-plaintext highlighter-rouge">DCMotor</code> objects are declared. For that, <code class="language-plaintext highlighter-rouge">GPIO</code> and <code class="language-plaintext highlighter-rouge">PWM</code> objects are declared with global scope to initialize each one of both motors that will be driven.</p>

<p>These objects are named <code class="language-plaintext highlighter-rouge">AIN1</code>, <code class="language-plaintext highlighter-rouge">AIN2</code>, <code class="language-plaintext highlighter-rouge">PWMA</code>, <code class="language-plaintext highlighter-rouge">BIN1</code>, <code class="language-plaintext highlighter-rouge">BIN2</code>, and <code class="language-plaintext highlighter-rouge">PWMB</code> for the <code class="language-plaintext highlighter-rouge">MotorA</code> and <code class="language-plaintext highlighter-rouge">MotorB</code> objects, respectively. These are <code class="language-plaintext highlighter-rouge">DCMotor</code> objects declared as <code class="language-plaintext highlighter-rouge">MotorLeft</code> and <code class="language-plaintext highlighter-rouge">MotorRight</code> and contain methods to set the speed and the spin direction to drive the DC motor and to stop it, as well as, a fourth boolean initialization parameter <code class="language-plaintext highlighter-rouge">true/false</code> to invert by software the motor direction rotation instead of inverting the motor‚Äôs jumpers physically.</p>

<p>As is shown next, I have used this parameter to invert the rotation direction of the <code class="language-plaintext highlighter-rouge">MotorA</code>, setting the last parameter to <code class="language-plaintext highlighter-rouge">true</code>, instead of inverting the jumpers physically. This feature can be useful when you do not have access to the circuit or the motor directly.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="c1">// Declaring the pins for MotorA </span>
<span class="n">GPIO</span> <span class="nf">AIN1</span> <span class="p">(</span><span class="n">P8_12</span><span class="p">);</span>
<span class="n">GPIO</span> <span class="nf">AIN2</span> <span class="p">(</span><span class="n">P8_14</span><span class="p">);</span>
<span class="n">PWM</span> <span class="nf">PWMA</span> <span class="p">(</span><span class="n">P8_13</span><span class="p">);</span>

<span class="c1">// Declare the MotorA</span>
<span class="n">DCMotor</span> <span class="nf">MotorLeft</span> <span class="p">(</span><span class="n">AIN1</span><span class="p">,</span> <span class="n">AIN2</span><span class="p">,</span> <span class="n">PWMA</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>

<span class="c1">// Declaring the  pins for MotorB</span>
<span class="n">GPIO</span> <span class="nf">BIN1</span> <span class="p">(</span><span class="n">P8_17</span><span class="p">);</span>
<span class="n">GPIO</span> <span class="nf">BIN2</span> <span class="p">(</span><span class="n">P8_18</span><span class="p">);</span>
<span class="n">PWM</span> <span class="nf">PWMB</span> <span class="p">(</span><span class="n">P8_19</span><span class="p">);</span>

<span class="c1">// Declare the MotorB</span>
<span class="n">DCMotor</span> <span class="nf">MotorRight</span> <span class="p">(</span><span class="n">BIN1</span><span class="p">,</span> <span class="n">BIN2</span><span class="p">,</span> <span class="n">PWMB</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>These <code class="language-plaintext highlighter-rouge">DCMotor</code> objects are used to initialize the <code class="language-plaintext highlighter-rouge">L298N</code> object with two of them. This inheritance structure has the goal to encapsulate the corresponding methods for any generic DC motor in the <code class="language-plaintext highlighter-rouge">DCMotor</code> object avoiding repeat code in the <code class="language-plaintext highlighter-rouge">L298N</code> object and focusing on the methods to <strong>drive / brake</strong> not only one, but the two motors at the same time and in a different direction if it desired.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="c1">// Declare the L298N Module</span>
<span class="n">L298N</span> <span class="nf">myL298NModule</span> <span class="p">(</span><span class="n">MotorLeft</span><span class="p">,</span> <span class="n">MotorRight</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>After that, I declare a <strong>vector of pointers</strong> to the <code class="language-plaintext highlighter-rouge">L298N</code> objects and initialize it with the object declared previously but passing these by <strong>reference</strong> instead of by value. This avoids creating a copy for each object and working directly with the L298N modules. Is here, where the user can add the number of modules desired.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="c1">// Declare the vector of pointers to L298N objects</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="n">L298N</span> <span class="o">*&gt;</span> <span class="n">vectorOfL298N</span> <span class="o">=</span> <span class="p">{</span><span class="o">&amp;</span><span class="n">myL298NModule</span><span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>To control the speed of both motors, the user can change it using the keys ‚ÄúW‚Äù and ‚ÄúS‚Äù to increase or decrease it, respectively. The class method <code class="language-plaintext highlighter-rouge">Drive()</code> checks if the user has input a value for the speed beyond the limits of <font color="red">100 and -100</font> and keeps it between this range, but in this case, the user code can do that too. If the user presses the key ‚ÄúY‚Äù, the program finishes.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="c1">// Update the motors speed</span>
<span class="k">switch</span> <span class="p">(</span><span class="n">userInput</span><span class="p">)</span>
<span class="p">{</span>
<span class="k">case</span> <span class="sc">'w'</span><span class="p">:</span>
  <span class="n">motorSpeed</span> <span class="o">+=</span> <span class="mi">10</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">motorSpeed</span> <span class="o">&gt;=</span> <span class="mi">100</span><span class="p">)</span>
    <span class="n">motorSpeed</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
  <span class="k">break</span><span class="p">;</span>
<span class="k">case</span> <span class="sc">'s'</span><span class="p">:</span>
  <span class="n">motorSpeed</span> <span class="o">-=</span> <span class="mi">10</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">motorSpeed</span> <span class="o">&lt;=</span> <span class="o">-</span><span class="mi">100</span><span class="p">)</span>
    <span class="n">motorSpeed</span> <span class="o">=</span> <span class="o">-</span><span class="mi">100</span><span class="p">;</span>
  <span class="k">break</span><span class="p">;</span>
<span class="nl">default:</span>
  <span class="k">break</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>To move the motors, the code uses the public template functions <code class="language-plaintext highlighter-rouge">Forward()</code> and <code class="language-plaintext highlighter-rouge">Backward()</code> defined in a separate <strong>template file</strong> which can be called directly from the main implementation code.</p>

<p>These <code class="language-plaintext highlighter-rouge">Forward()</code> and <code class="language-plaintext highlighter-rouge">Backward()</code> functions, take as arguments a vector of pointers to <code class="language-plaintext highlighter-rouge">typename Module</code> objects passed by reference, the speed value that will be used to drive the motors, the duration of the movement, and the action to do after the movement has been executed. Inside of these functions, a <code class="language-plaintext highlighter-rouge">for loop</code> iterates on each <code class="language-plaintext highlighter-rouge">Module</code> object, i.e., on each DC motor driver, and runs it in the same rotation direction at the desired speed.</p>

<p>It is important to note that, these functions receive <font color="red">any DC motor module </font> object and call the corresponding methods to drive the DC motors according to the respective module. For example the TB6612FNG module, which was shown in <a href="/Post37-BeagleBone_TB6612FNG_Drive/">this entry</a>.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="rouge-code"><pre><span class="cm">/*
  Function to drive FORWARD a robot with ANY number of Module drivers 
  during certain time
  @param std::vector&lt;Module *&gt;: The vector of pointers to Module objects  
  @param int speed: The desired speed (0,100). It set up the correct value if the user enters 
                    a negative value.
  @param int duration:  The desired duration in milliseconds with 0 as 
                        default value
  @param STOPMODE action &lt;brake / idle&gt;:  Action on the motor after driving it with 
                                        &lt;idle&gt; as default action.  
*/</span>
<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">Module</span><span class="p">&gt;</span>
<span class="kt">void</span> <span class="nf">Forward</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Module</span> <span class="o">*&gt;</span> <span class="n">vectorOfModules</span><span class="p">,</span> <span class="kt">int</span> <span class="n">speed</span><span class="p">,</span> <span class="kt">int</span> <span class="n">duration</span><span class="p">,</span> <span class="n">STOPMODE</span> <span class="n">action</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">speed</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">speed</span> <span class="o">*=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">module</span> <span class="o">:</span> <span class="n">vectorOfModules</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">module</span><span class="o">-&gt;</span><span class="n">GetMotorAisUsed</span><span class="p">())</span>
      <span class="n">module</span><span class="o">-&gt;</span><span class="n">MotorA</span><span class="p">.</span><span class="n">Drive</span><span class="p">(</span><span class="n">speed</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">module</span><span class="o">-&gt;</span><span class="n">GetMotorBisUsed</span><span class="p">())</span>
      <span class="n">module</span><span class="o">-&gt;</span><span class="n">MotorB</span><span class="p">.</span><span class="n">Drive</span><span class="p">(</span><span class="n">speed</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">duration</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">DelayMilliseconds</span><span class="p">(</span><span class="n">duration</span><span class="p">);</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="n">action</span> <span class="o">==</span> <span class="n">idle</span><span class="p">)</span>
      <span class="n">Idle</span><span class="p">(</span><span class="n">vectorOfModules</span><span class="p">);</span>
    <span class="k">else</span>
      <span class="n">Brake</span><span class="p">(</span><span class="n">vectorOfModules</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="rouge-code"><pre><span class="cm">/*
  Function to drive BACKWARD a robot with ANY number of Module drivers 
  during certain time
  @param std::vector&lt;Module *&gt;: The vector of pointers to Module objects
  @param int speed: The desired speed (-100,0). It set up the correct value if
                    the user enters a positive value.
  @param int duration:  The desired duration in milliseconds with 0 as 
                        default value
  @param STOPMODE action &lt;brake / idle&gt;:  Action on the motor after driving it with 
                                        &lt;idle&gt; as default action. 
*/</span>
<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">Module</span><span class="p">&gt;</span>
<span class="kt">void</span> <span class="nf">Backward</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Module</span> <span class="o">*&gt;</span> <span class="n">vectorOfModules</span><span class="p">,</span> <span class="kt">int</span> <span class="n">speed</span><span class="p">,</span> <span class="kt">int</span> <span class="n">duration</span><span class="p">,</span> <span class="n">STOPMODE</span> <span class="n">action</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">speed</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">speed</span> <span class="o">*=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">module</span> <span class="o">:</span> <span class="n">vectorOfModules</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">module</span><span class="o">-&gt;</span><span class="n">GetMotorAisUsed</span><span class="p">())</span>
      <span class="n">module</span><span class="o">-&gt;</span><span class="n">MotorA</span><span class="p">.</span><span class="n">Drive</span><span class="p">(</span><span class="n">speed</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">module</span><span class="o">-&gt;</span><span class="n">GetMotorBisUsed</span><span class="p">())</span>
      <span class="n">module</span><span class="o">-&gt;</span><span class="n">MotorB</span><span class="p">.</span><span class="n">Drive</span><span class="p">(</span><span class="n">speed</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">duration</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">DelayMilliseconds</span><span class="p">(</span><span class="n">duration</span><span class="p">);</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="n">action</span> <span class="o">==</span> <span class="n">idle</span><span class="p">)</span>
      <span class="n">Idle</span><span class="p">(</span><span class="n">vectorOfModules</span><span class="p">);</span>
    <span class="k">else</span>
      <span class="n">Brake</span><span class="p">(</span><span class="n">vectorOfModules</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>In order to complement the behavior to control any number of DC Motors with some DC motor drivers,  the <code class="language-plaintext highlighter-rouge">Brake()</code> and <code class="language-plaintext highlighter-rouge">Idle()</code> functions are defined too. It brakes or set the Idle mode any number of motors in the vector of pointers to  <code class="language-plaintext highlighter-rouge">typename Module</code> objects.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="cm">/*
  Function to BRAKE a robot with ANY number of motors
  @param std::vector&lt;Module *&gt;: The vector of pointers to Module objects
*/</span>
<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">Module</span><span class="p">&gt;</span>
<span class="kt">void</span> <span class="nf">Brake</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Module</span> <span class="o">*&gt;</span> <span class="n">vectorOfModules</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">module</span> <span class="o">:</span> <span class="n">vectorOfModules</span><span class="p">)</span>
    <span class="n">module</span><span class="o">-&gt;</span><span class="n">Brake</span><span class="p">();</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="cm">/*
  Function to IDLE a robot with ANY number of motors
  @param std::vector&lt;Module *&gt;: The vector of pointers to Module objects 
*/</span>
<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">Module</span><span class="p">&gt;</span>
<span class="kt">void</span> <span class="nf">Idle</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Module</span> <span class="o">*&gt;</span> <span class="n">vectorOfModules</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">module</span> <span class="o">:</span> <span class="n">vectorOfModules</span><span class="p">)</span>
    <span class="n">module</span><span class="o">-&gt;</span><span class="n">Idle</span><span class="p">();</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>In the implementation code according to the entered option, the user can decide when calling one, other, or one-third option to move forward, backward, or brake the motors with the <code class="language-plaintext highlighter-rouge">Brake()</code> function. <strong>Note</strong> how the first parameter used here is a <code class="language-plaintext highlighter-rouge">vector&lt;L298N *&gt;</code> fits in the template function without any problem. The main advantage is that these functions can be used with any other DC motor driver without the necessity of writing again the same code.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="c1">// Move the motors</span>
<span class="k">if</span> <span class="p">(</span><span class="n">motorSpeed</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
  <span class="n">Forward</span><span class="p">(</span><span class="n">vectorOfL298N</span><span class="p">,</span> <span class="n">motorSpeed</span><span class="p">);</span>
<span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">motorSpeed</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
  <span class="n">Backward</span><span class="p">(</span><span class="n">vectorOfL298N</span><span class="p">,</span> <span class="n">motorSpeed</span><span class="p">);</span>
<span class="k">else</span>
  <span class="nf">Brake</span><span class="p">(</span><span class="n">vectorOfL298N</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The complete code for this application uses a <code class="language-plaintext highlighter-rouge">while loop</code> to control both motors increasing and decreasing the speed until the user press the key ‚ÄúY‚Äù. This code is shown in the next listing.</p>

<h3 id="l298n_15cpp">L298N_1.5.cpp</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
</pre></td><td class="rouge-code"><pre><span class="cm">/******************************************************************************
L298N_1.5.cpp
@wgaonar
26/03/2022
https://github.com/wgaonar/BeagleCPP

- Drive a 2 or more motors through a vector

Class: L298N
******************************************************************************/</span>
<span class="cp">#include &lt;iostream&gt;
#include "../../../Sources/L298N.h"
#include "../../../Sources/DCMOTOR_UTILS.h"
#include "../../../Sources/DCMOTOR_UTILS.cpp"
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="c1">// Declaring the pins for MotorA </span>
<span class="n">GPIO</span> <span class="nf">AIN1</span> <span class="p">(</span><span class="n">P8_12</span><span class="p">);</span>
<span class="n">GPIO</span> <span class="nf">AIN2</span> <span class="p">(</span><span class="n">P8_14</span><span class="p">);</span>
<span class="n">PWM</span> <span class="nf">PWMA</span> <span class="p">(</span><span class="n">P8_13</span><span class="p">);</span>

<span class="c1">// Declare the MotorA</span>
<span class="n">DCMotor</span> <span class="nf">MotorLeft</span> <span class="p">(</span><span class="n">AIN1</span><span class="p">,</span> <span class="n">AIN2</span><span class="p">,</span> <span class="n">PWMA</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>

<span class="c1">// Declaring the  pins for MotorB</span>
<span class="n">GPIO</span> <span class="nf">BIN1</span> <span class="p">(</span><span class="n">P8_17</span><span class="p">);</span>
<span class="n">GPIO</span> <span class="nf">BIN2</span> <span class="p">(</span><span class="n">P8_18</span><span class="p">);</span>
<span class="n">PWM</span> <span class="nf">PWMB</span> <span class="p">(</span><span class="n">P8_19</span><span class="p">);</span>

<span class="c1">// Declare the MotorB</span>
<span class="n">DCMotor</span> <span class="nf">MotorRight</span> <span class="p">(</span><span class="n">BIN1</span><span class="p">,</span> <span class="n">BIN2</span><span class="p">,</span> <span class="n">PWMB</span><span class="p">);</span>

<span class="c1">// Declare the L298N Module</span>
<span class="n">L298N</span> <span class="nf">myL298NModule</span> <span class="p">(</span><span class="n">MotorLeft</span><span class="p">,</span> <span class="n">MotorRight</span><span class="p">);</span>

<span class="c1">// Declare the vector of pointers to L298N objects</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="n">L298N</span> <span class="o">*&gt;</span> <span class="n">vectorOfL298N</span> <span class="o">=</span> <span class="p">{</span><span class="o">&amp;</span><span class="n">myL298NModule</span><span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">string</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"Main program starting here..."</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span><span class="s">"Blue"</span><span class="p">,</span> <span class="s">"White"</span><span class="p">,</span> <span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

  <span class="n">message</span> <span class="o">=</span> <span class="s">"If you want to stop the program, enter 'y' for yes"</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Blue"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
  <span class="n">message</span> <span class="o">=</span> <span class="s">"Or enter 'w' for increase speed or 's' for decrease it"</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Blue"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

  <span class="kt">int</span> <span class="n">motorSpeed</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="kt">char</span> <span class="n">userInput</span> <span class="o">=</span> <span class="sc">'\0'</span><span class="p">;</span>
  <span class="k">while</span> <span class="p">(</span><span class="n">userInput</span> <span class="o">!=</span> <span class="sc">'y'</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">message</span> <span class="o">=</span> <span class="s">"Enter an option 'y', 'w', 's': "</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Blue"</span><span class="p">);</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">userInput</span><span class="p">;</span>

    <span class="c1">// Update the motors speed</span>
    <span class="k">switch</span> <span class="p">(</span><span class="n">userInput</span><span class="p">)</span>
    <span class="p">{</span>
    <span class="k">case</span> <span class="sc">'w'</span><span class="p">:</span>
      <span class="n">motorSpeed</span> <span class="o">+=</span> <span class="mi">10</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">motorSpeed</span> <span class="o">&gt;=</span> <span class="mi">100</span><span class="p">)</span>
        <span class="n">motorSpeed</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="sc">'s'</span><span class="p">:</span>
      <span class="n">motorSpeed</span> <span class="o">-=</span> <span class="mi">10</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">motorSpeed</span> <span class="o">&lt;=</span> <span class="o">-</span><span class="mi">100</span><span class="p">)</span>
        <span class="n">motorSpeed</span> <span class="o">=</span> <span class="o">-</span><span class="mi">100</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="nl">default:</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Move the motors</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">motorSpeed</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
      <span class="n">Forward</span><span class="p">(</span><span class="n">vectorOfL298N</span><span class="p">,</span> <span class="n">motorSpeed</span><span class="p">);</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">motorSpeed</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
      <span class="n">Backward</span><span class="p">(</span><span class="n">vectorOfL298N</span><span class="p">,</span> <span class="n">motorSpeed</span><span class="p">);</span>
    <span class="k">else</span>
      <span class="n">Brake</span><span class="p">(</span><span class="n">vectorOfL298N</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="n">message</span> <span class="o">=</span> <span class="s">"Main program finishes here..."</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span><span class="s">"Blue"</span><span class="p">,</span> <span class="s">"White"</span><span class="p">,</span><span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Se you in the next post.</p>
:ET