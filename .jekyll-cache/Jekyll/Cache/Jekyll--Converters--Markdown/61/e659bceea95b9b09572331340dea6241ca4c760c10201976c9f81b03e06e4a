I"»?<p>In this post, I show how to measure distance with the cheap ultrasonic sensor HC_SR04. The main contribution is to provide a class in C++ with implemented methods to get the distance with this sensor. This class is part of a whole library that can be found  <a href="https://github.com/wgaonar/BeagleCPP">here</a>. There a few <a href="https://tutorials-raspberrypi.com/raspberry-pi-ultrasonic-sensor-hc-sr04/">working examples</a> for this sensor using Python on the Raspberry Pi instead of the BeagleBone or in <a href="https://sheldondwill.wordpress.com/2014/02/04/using-an-ultrasonic-sensor-hc-sr04-with-a-3-3v-micro-controller-tiva-c-series/">3.3V microcontrollers</a>. But, I did not found one example for C++.</p>

<p>I use a voltage level shifter between 3.3V and 5.0V to prevent damage to the BeagleBone. It is important to remember that the logic voltage for the BeagleBone is <font color="red">3.3V</font>. If the user provides a greater voltage, the BeagleBone could be damaged.</p>

<p>It is important to note that the HC_SR04 can be used with the same timing parameters as it is used with a microcontroller. The nominal timing times can be seen in Figure 1 with a 10us pulse to activate the sensor with the trigger pin.</p>

<figure style="text-align: center; width:70%; 
              margin-left: auto; 
              margin-right: auto;">
    <img src="../assets/images/Post34/HC_SR04_Timing_1.png" alt="HC_SR04_Timing_1.png" width="100%" />
  <figcaption>
    Figure 1: Timing module for the ultrasonic sensor HC_SR04 with a microcontroller.
  </figcaption>
</figure>

<p>With the BeagleBone, Raspberry Pi and other Single Board Computers the time required to access the system files of the pins has to take into account. In the BeagleBone this time is about <font color="red">200us</font> with <a href="https://github.com/wgaonar/BeagleCPP/blob/main/Sources/HC_SR04.h">this library</a>. For this reason, to use the HC_SR04 with the BeagleBone the pulse to activate the sensor has to be at least 5ms, as you can see in the diagram of Figure 2.</p>

<figure style="text-align: center; width:70%; 
              margin-left: auto; 
              margin-right: auto;">
    <img src="../assets/images/Post34/HC_SR04_Timing_2.png" alt="HC_SR04_Timing_2.png" width="100%" />
  <figcaption>
    Figure 2: Timing module for the ultrasonic sensor HC_SR04 with a microprocessor as in the BeagleBone.
  </figcaption>
</figure>

<h2 id="circuit-and-components">Circuit and components</h2>

<p>The circuit can be seen in Figure 3. It consists of a voltage level shifter, an HC-SRO4, and the BeagleBone. The pins used for trigger and echo are <strong>P9_15</strong> and <strong>P9_17</strong> and these were configured as digital output and input respectively.</p>

<p>The components are:</p>
<ul>
  <li>1 Ultrasonic Sensor HC_SR04</li>
  <li>1 Level Shifter for 3.3V - 5.0V TXS0108E</li>
  <li>1 Protoboard mini</li>
  <li>Jumpers male-male to make the connections</li>
</ul>

<figure style="text-align: center; width:70%; 
              margin-left: auto; 
              margin-right: auto;">
    <img src="../assets/images/Post34/circuit.png" alt="circuit.png" width="100%" />
  <figcaption>
    Figure 3: Circuit to measure the distance with the ultrasonic sensor HC_SR04.
  </figcaption>
</figure>

<h2 id="coding">Coding</h2>

<p>First, an <code class="language-plaintext highlighter-rouge">HC_SR04</code> object is declared with global scope:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="c1">// Declaring the pins and the HC_SR04 object</span>
<span class="n">HC_SR04</span> <span class="nf">distanceSensor</span> <span class="p">(</span><span class="n">P9_15</span><span class="p">,</span> <span class="n">P9_17</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>A double variable is declared to store the distance readings. Then, the <code class="language-plaintext highlighter-rouge">distanceSensor.MeasureDistanceCm()</code> method is called on the previously defined <code class="language-plaintext highlighter-rouge">HC_SR04</code> object. This activates the sensor through the trigger pin and waits for the pulse in the echo pin. Once the sent pulse is received, the time travel is counted and this calculates the distance multiplying the standard speed sound by this time and dividing this result by 2, due that the emitted sound wave has to come back to the sensor once it hits an object. The units for the calculated distance are in cm and this is bounded in a range of 0 - 400cm. The method is:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="kt">double</span> <span class="n">HC_SR04</span><span class="o">::</span><span class="n">MeasureDistanceCm</span><span class="p">()</span> 
<span class="p">{</span>
  <span class="c1">// Send the pulse and keep it for at least 5ms in HIGH state</span>
  <span class="n">triggerPin</span><span class="p">.</span><span class="n">DigitalWrite</span><span class="p">(</span><span class="n">HIGH</span><span class="p">);</span>
  <span class="n">Delayms</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
  <span class="n">triggerPin</span><span class="p">.</span><span class="n">DigitalWrite</span><span class="p">(</span><span class="n">LOW</span><span class="p">);</span>

  <span class="kt">double</span> <span class="n">distanceCm</span> <span class="o">=</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">PulseDuration</span><span class="p">()</span> <span class="o">*</span> <span class="n">soundSpeed</span> <span class="o">/</span> <span class="mf">2.0</span><span class="p">)</span> <span class="o">+</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">offset</span><span class="p">;</span>
  
  <span class="k">if</span> <span class="p">(</span><span class="n">distanceCm</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> 
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">distanceCm</span> <span class="o">&gt;</span> <span class="mi">400</span><span class="p">)</span> 
    <span class="k">return</span> <span class="mi">400</span><span class="p">;</span>
  <span class="k">else</span>
    <span class="k">return</span> <span class="n">distanceCm</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The HC_SR04 implements the <code class="language-plaintext highlighter-rouge">PulseDuration()</code> method that is in charge of count the time that the sound wave takes to come back to the sensor.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="kt">double</span> <span class="n">HC_SR04</span><span class="o">::</span><span class="n">PulseDuration</span><span class="p">()</span> 
<span class="p">{</span>
  <span class="k">auto</span> <span class="n">pulseStart</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">steady_clock</span><span class="o">::</span><span class="n">now</span><span class="p">();</span>
  <span class="k">auto</span> <span class="n">pulseEnd</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">steady_clock</span><span class="o">::</span><span class="n">now</span><span class="p">();</span>

  <span class="k">while</span> <span class="p">(</span><span class="n">echoPin</span><span class="p">.</span><span class="n">DigitalRead</span><span class="p">()</span> <span class="o">==</span> <span class="n">LOW</span><span class="p">)</span>
    <span class="n">pulseStart</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">steady_clock</span><span class="o">::</span><span class="n">now</span><span class="p">();</span>
    
  <span class="k">while</span> <span class="p">(</span><span class="n">echoPin</span><span class="p">.</span><span class="n">DigitalRead</span><span class="p">()</span> <span class="o">==</span> <span class="n">HIGH</span><span class="p">)</span>
    <span class="n">pulseEnd</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">steady_clock</span><span class="o">::</span><span class="n">now</span><span class="p">();</span>
  
  <span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">duration</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">duration</span> <span class="o">=</span> <span class="p">(</span><span class="n">pulseEnd</span><span class="o">-</span><span class="n">pulseStart</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">duration</span><span class="p">.</span><span class="n">count</span><span class="p">();</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>In the main program a <code class="language-plaintext highlighter-rouge">for loop</code> can be used to measure the distance each 500ms for example:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kt">double</span> <span class="n">distance</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">20</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">distance</span> <span class="o">=</span> <span class="n">distanceSensor</span><span class="p">.</span><span class="n">MeasureDistanceCm</span><span class="p">();</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Distance reading: "</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">" = "</span> <span class="o">&lt;&lt;</span> <span class="n">distance</span> <span class="o">&lt;&lt;</span> <span class="s">"cm</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
  <span class="n">Delayms</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The complete code for this application is shown in the next listing together with its corresponding execution video.</p>

<h3 id="hc_sr04_11cpph2">HC_SR04_1.1.cpp&lt;/h2&gt;</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="rouge-code"><pre><span class="cm">/******************************************************************************
HC_SR04_1.1.cpp
@wgaonar
22/06/2021
https://github.com/wgaonar/BeagleCPP

Make and show 20 distance readings each half second

Class: HC_SR04
******************************************************************************/</span>

<span class="cp">#include &lt;iostream&gt;
#include &lt;thread&gt;         // std::this_thread::sleep_for
#include &lt;chrono&gt;         // std::chrono::milliseconds
</span>
<span class="cp">#include "../../../Sources/GPIO.h"
#include "../../../Sources/HC_SR04.h"
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="c1">// Declaring the pins and the HC_SR04 object</span>
<span class="n">HC_SR04</span> <span class="nf">distanceSensor</span> <span class="p">(</span><span class="n">P9_15</span><span class="p">,</span> <span class="n">P9_17</span><span class="p">);</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">string</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"Main program starting here..."</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span><span class="s">"Blue"</span><span class="p">,</span> <span class="s">"White"</span><span class="p">,</span> <span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

  <span class="kt">double</span> <span class="n">distance</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">20</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">distance</span> <span class="o">=</span> <span class="n">distanceSensor</span><span class="p">.</span><span class="n">MeasureDistanceCm</span><span class="p">();</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Distance reading: "</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">" = "</span> <span class="o">&lt;&lt;</span> <span class="n">distance</span> <span class="o">&lt;&lt;</span> <span class="s">"cm</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="n">Delayms</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
  <span class="p">}</span>
  
  <span class="n">message</span> <span class="o">=</span> <span class="s">"Main program finishes here..."</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span><span class="s">"Blue"</span><span class="p">,</span> <span class="s">"White"</span><span class="p">,</span><span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="execution-of-the-program">Execution of the program:</h3>
<figure style="text-align: center; width:100%; 
              margin-left: auto; 
              margin-right: auto;">
  <video width="100%" controls="" poster="../assets/images/Post34/VideoCover.jpg">
    <source src="../assets/images/Post34/HC_SR04_1.1.mp4" type="video/mp4" />
  </video>
  <figcaption>
    Video: Execution of the program.
  </figcaption>
</figure>

<p>Se you in the next post.</p>
:ET