I"ýD<p>In this post, I show how to include the air temperature in the calculus of the speed sound and include an offset value for the distance reported by the sensor. This value can be useful for example when the sensor is placed not at the edge of a robot and the measurements have to be subtracted to reference these at the robotâ€™s boundary avoiding an undesired collision. This class is part of a whole library that can be found <a href="https://github.com/wgaonar/BeagleCPP">here</a>.</p>

<p>I use a voltage level shifter between 3.3V and 5.0V to prevent damage to the BeagleBone. It is important to remember that the logic voltage for the BeagleBone is <font color="red">3.3V</font>. If the user provides a greater voltage, the BeagleBone could be damaged.</p>

<h2 id="circuit-and-components">Circuit and components</h2>

<p>The circuit can be seen in Figure 1. It consists of a voltage level shifter, an HC-SRO4, and the BeagleBone. The pins used for trigger and echo are <strong>P9_15</strong> and <strong>P9_17</strong> and these were configured as digital output and input respectively.</p>

<p>The components are:</p>
<ul>
  <li>1 Ultrasonic Sensor HC_SR04</li>
  <li>1 Level Shifter for 3.3V - 5.0V TXS0108E</li>
  <li>1 Protoboard mini</li>
  <li>Jumpers male-male to make the connections</li>
</ul>

<figure style="text-align: center; width:70%; 
              margin-left: auto; 
              margin-right: auto;">
    <img src="../assets/images/Post36/Circuit.png" alt="circuit.png" width="100%" />
  <figcaption>
    Figure 1: Circuit to measure the distance with the ultrasonic sensor HC_SR04.
  </figcaption>
</figure>

<h2 id="coding">Coding</h2>

<p>First, an <code class="language-plaintext highlighter-rouge">HC_SR04</code> object is declared with global scope using a previously <code class="language-plaintext highlighter-rouge">GPIO</code> declared objects and an overloaded constructor is used to include the offset in cm and the temperature in Â°Celsius:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="n">GPIO</span> <span class="nf">triggerPin</span><span class="p">(</span><span class="n">P9_15</span><span class="p">);</span>
<span class="n">GPIO</span> <span class="nf">echoPin</span><span class="p">(</span><span class="n">P9_17</span><span class="p">);</span>

<span class="c1">// Declaring the pins and the HC_SR04 object with offset and temperature correction factors</span>
<span class="n">HC_SR04</span> <span class="nf">distanceSensor</span> <span class="p">(</span><span class="n">triggerPin</span><span class="p">,</span> <span class="n">echoPin</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">25</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The overloaded constructor of the class takes these user values to include an offset and the temperature to estimate the soundâ€™s speed in the air that will be used in the calculus of the distance. Both values are class private members of type <code class="language-plaintext highlighter-rouge">double</code>. For including the temperature to correct the speed sound, the next equation can be used. This is explained  <a href="http://hyperphysics.phy-astr.gsu.edu/hbase/Sound/souspe3.html">here</a>.</p>

<p>[V_{sound} = 33,130 + 60.6 * T \mspace{18mu} \textrm{ Units are in } \frac{cm}{s} \textrm{ and } ^\circ C]</p>

<p>The corresponding overloaded constructor with this corrections is shown in the next listing:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre><span class="c1">// Overload Constructor with offset and temperature for correction </span>
<span class="n">HC_SR04</span><span class="o">::</span><span class="n">HC_SR04</span><span class="p">(</span><span class="n">GPIO</span> <span class="n">newTriggerPin</span><span class="p">,</span> <span class="n">GPIO</span> <span class="n">newEchoPin</span><span class="p">,</span> <span class="kt">double</span> <span class="n">newOffset</span><span class="p">,</span> <span class="kt">double</span> <span class="n">temperature</span><span class="p">)</span> <span class="o">:</span>
        <span class="n">triggerPin</span><span class="p">(</span><span class="n">newTriggerPin</span><span class="p">),</span> <span class="n">echoPin</span><span class="p">(</span><span class="n">newEchoPin</span><span class="p">)</span> 
<span class="p">{</span>
  <span class="k">this</span><span class="o">-&gt;</span><span class="n">offset</span> <span class="o">=</span> <span class="n">newOffset</span><span class="p">;</span> 
  <span class="k">this</span><span class="o">-&gt;</span><span class="n">soundSpeed</span> <span class="o">=</span> <span class="mi">33130</span> <span class="o">+</span> <span class="mf">60.6</span> <span class="o">*</span> <span class="n">temperature</span><span class="p">;</span> <span class="c1">// Units in cm/s and ÂºC</span>
  <span class="n">InitSensor</span><span class="p">();</span>

  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">message</span><span class="p">;</span>
  <span class="n">message</span> <span class="o">=</span> <span class="s">"</span><span class="se">\n</span><span class="s">HC-SR04: Sensor object with trigger pin: "</span> <span class="o">+</span>
            <span class="k">this</span><span class="o">-&gt;</span><span class="n">triggerPin</span><span class="p">.</span><span class="n">GetPinHeaderId</span><span class="p">()</span> <span class="o">+</span> <span class="s">" / echo pin: "</span> <span class="o">+</span>
            <span class="k">this</span><span class="o">-&gt;</span><span class="n">echoPin</span><span class="p">.</span><span class="n">GetPinHeaderId</span><span class="p">()</span> <span class="o">+</span> 
            <span class="s">" was created!</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Violet"</span><span class="p">);</span>
  
  <span class="n">std</span><span class="o">::</span><span class="n">stringstream</span> <span class="n">streamSoundSpeed</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="s">"The sound speed that will be used is: "</span><span class="p">,</span> <span class="s">"Violet"</span><span class="p">);</span>
  <span class="n">streamSoundSpeed</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">fixed</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">setprecision</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">soundSpeed</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">streamSoundSpeed</span><span class="p">.</span><span class="n">str</span><span class="p">(),</span> <span class="s">"Violet"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
  
  <span class="n">std</span><span class="o">::</span><span class="n">stringstream</span> <span class="n">streamOffset</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="s">"The distance offset that will be used is: "</span><span class="p">,</span><span class="s">"Violet"</span><span class="p">);</span>
  <span class="n">streamOffset</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">fixed</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">setprecision</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">offset</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">streamOffset</span><span class="p">.</span><span class="n">str</span><span class="p">(),</span> <span class="s">"Violet"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span> 
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The class method <code class="language-plaintext highlighter-rouge">MeasureDistanceCm()</code> to measure the distance works with the modified <code class="language-plaintext highlighter-rouge">offset</code> and <code class="language-plaintext highlighter-rouge">speedSound</code> values if the user has included these in the constructed <code class="language-plaintext highlighter-rouge">HC_SR04</code> object. In another case, that method works with the default and standard values,i.e., an offset of <code class="language-plaintext highlighter-rouge">0.0</code> and a sound speed of <code class="language-plaintext highlighter-rouge">34300.0</code>, respectively.</p>

<p>In the main program a <code class="language-plaintext highlighter-rouge">for loop</code> can be used to  measure the distance 10 times each second using the <code class="language-plaintext highlighter-rouge">MeasureDistanceCmWithMedian()</code> which defines a window size to filter the data with a median value and calls the <code class="language-plaintext highlighter-rouge">MeasureDistanceCm()</code> method to do the reading:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kt">double</span> <span class="n">distance</span> <span class="o">=</span> <span class="n">distanceSensor</span><span class="p">.</span><span class="n">MeasureDistanceCmWithMedian</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">distance</span> <span class="o">=</span> <span class="n">distanceSensor</span><span class="p">.</span><span class="n">MeasureDistanceCmWithMedian</span><span class="p">(</span><span class="mi">5</span><span class="p">);;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Distance reading: "</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">" = "</span> <span class="o">&lt;&lt;</span> <span class="n">distance</span> <span class="o">&lt;&lt;</span> <span class="s">"cm</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
  <span class="n">Delayms</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The complete code for this application is shown in the next listing together with its corresponding execution output.</p>

<h3 id="hc_sr04_13cpp">HC_SR04_1.3.cpp</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
</pre></td><td class="rouge-code"><pre><span class="cm">/******************************************************************************
HC_SR04_1.3.cpp
@wgaonar
29/06/2021
https://github.com/wgaonar/BeagleCPP

Uses a Median filter for each one of the 10 sensor readings each second. 
The sensor object is constructed with offset and temperature correction factors

Class: HC_SR04
******************************************************************************/</span>

<span class="cp">#include &lt;iostream&gt;
#include &lt;list&gt;
</span>
<span class="cp">#include "../../../Sources/GPIO.h"
#include "../../../Sources/HC_SR04.h"
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="n">GPIO</span> <span class="nf">triggerPin</span><span class="p">(</span><span class="n">P9_15</span><span class="p">);</span>
<span class="n">GPIO</span> <span class="nf">echoPin</span><span class="p">(</span><span class="n">P9_17</span><span class="p">);</span>

<span class="c1">// Declaring the pins and the HC_SR04 object with offset and temperature correction factors</span>
<span class="n">HC_SR04</span> <span class="nf">distanceSensor</span> <span class="p">(</span><span class="n">triggerPin</span><span class="p">,</span> <span class="n">echoPin</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">25</span><span class="p">);</span>


<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">string</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"Main program starting here..."</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span><span class="s">"Blue"</span><span class="p">,</span> <span class="s">"White"</span><span class="p">,</span> <span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

  <span class="kt">double</span> <span class="n">distance</span> <span class="o">=</span> <span class="n">distanceSensor</span><span class="p">.</span><span class="n">MeasureDistanceCmWithMedian</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">distance</span> <span class="o">=</span> <span class="n">distanceSensor</span><span class="p">.</span><span class="n">MeasureDistanceCmWithMedian</span><span class="p">(</span><span class="mi">5</span><span class="p">);;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Distance reading: "</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">" = "</span> <span class="o">&lt;&lt;</span> <span class="n">distance</span> <span class="o">&lt;&lt;</span> <span class="s">"cm</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="n">Delayms</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="n">message</span> <span class="o">=</span> <span class="s">"Main program finishes here..."</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span><span class="s">"Blue"</span><span class="p">,</span> <span class="s">"White"</span><span class="p">,</span><span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="execution-of-the-program">Execution of the program:</h3>
<figure style="text-align: center; width:100%; 
              margin-left: auto; 
              margin-right: auto;">
    <img src="../assets/images/Post36/Execution.png" alt="circuit.png" width="100%" />
  <figcaption>
    Figure 2: Execution of the program.
  </figcaption>
</figure>

<p>Se you in the next post.</p>
:ET