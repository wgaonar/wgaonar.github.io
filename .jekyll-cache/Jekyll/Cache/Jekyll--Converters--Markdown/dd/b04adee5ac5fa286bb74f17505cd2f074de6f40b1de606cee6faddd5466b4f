I"™H<p>In this post, I will continue to show you how to read a button with the BeagleBone Black.  In the <a href="/Post17-BeagleBone_ReadAButton-Part-I/"> first entry</a> I showed how to read an input from a button doing <em>POLLING</em> in the code, i.e., checking continuously for the state of the button inside the main program.</p>

<p>In this post, I show a new method named <code class="language-plaintext highlighter-rouge">WaitForButton()</code> to the C++ class <code class="language-plaintext highlighter-rouge">BUTTON</code> that stop the main program until a button has been pressed.</p>

<h2 id="circuit-and-components">Circuit and components</h2>

<p>The circuit can be seen in Figure 1. Please keep in mind that the BeagleBone works at <font color="red">3.3V</font> and not 5V like microcontrollers as Arduino. It is so muy important to avoid damage to the board, especially when you are working with buttons or digital inputs in general.</p>

<p>The components are:</p>
<ul>
  <li>1 Resistor of 10KÎ© as a pull-down resistor</li>
  <li>1 Push button of 12mm</li>
  <li>Jumpers male-male to make the connections</li>
</ul>

<figure style="text-align: center; width:70%; 
              margin-left: auto; 
              margin-right: auto;">
    <img src="../assets/images/Post18/Circuit_bb.jpg" alt="Circuit_bb.jpg" width="100%" />
  <figcaption>
    Figure 1: Circuit to read the input from a button.
  </figcaption>
</figure>

<h2 id="coding">Coding</h2>

<p>I added the corresponding methods to read a button into the class <strong>BUTTON</strong> who is derived from GPIO class. The methods are:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">WaitForButton()</code></li>
  <li><code class="language-plaintext highlighter-rouge">WaitForButton(int)</code></li>
</ul>

<p>The <code class="language-plaintext highlighter-rouge">WaitForButton()</code> method, first checks if the GPIO is attached to a button has been set up as INPUT and then wait until the button has changed from a <code class="language-plaintext highlighter-rouge">LOW</code> state to a <code class="language-plaintext highlighter-rouge">HIGH</code> state. This means the button has been pressed.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">BUTTON</span><span class="o">::</span><span class="n">WaitForButton</span><span class="p">()</span>
<span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">mode</span> <span class="o">!=</span> <span class="n">INPUT</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">perror</span><span class="p">(</span><span class="s">"'waitForButton' method only works on INPUT mode"</span><span class="p">);</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="n">string</span> <span class="n">message</span><span class="p">;</span>

  <span class="n">WriteFile</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s">"edge"</span><span class="p">,</span> <span class="s">"rising"</span><span class="p">);</span>
  <span class="k">while</span> <span class="p">(</span><span class="n">stopWaitForButtonFlag</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">previousValueOnPin</span> <span class="o">=</span> <span class="n">ReadButton</span><span class="p">();</span> 
    <span class="k">if</span> <span class="p">(</span><span class="n">previousValueOnPin</span> <span class="o">==</span> <span class="n">LOW</span><span class="p">)</span>
      <span class="k">break</span><span class="p">;</span> 
  <span class="p">}</span>
  <span class="k">while</span> <span class="p">(</span><span class="n">stopWaitForButtonFlag</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ReadButton</span><span class="p">()</span> <span class="o">==</span> <span class="n">HIGH</span><span class="p">)</span>
      <span class="k">break</span><span class="p">;</span> 
  <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">previousValueOnPin</span> <span class="o">!=</span> <span class="n">valueOnPin</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">message</span> <span class="o">=</span> <span class="s">"A RISING edge was detected!"</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Pink"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>The second method <code class="language-plaintext highlighter-rouge">WaitForButton(int)</code> is an overload of the first. The difference consists that this method receives <font color="red">one</font> 
of the next types of transition on the pin:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">RISING</code></li>
  <li><code class="language-plaintext highlighter-rouge">FALLING</code></li>
  <li><code class="language-plaintext highlighter-rouge">BOTH</code></li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">BUTTON</span><span class="o">::</span><span class="n">WaitForButton</span><span class="p">(</span><span class="kt">int</span> <span class="n">edge</span> <span class="o">=</span> <span class="n">RISING</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">mode</span> <span class="o">!=</span> <span class="n">INPUT</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">perror</span><span class="p">(</span><span class="s">"'waitForButton' method only works on INPUT mode"</span><span class="p">);</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="n">string</span> <span class="n">message</span><span class="p">;</span>
  <span class="k">switch</span> <span class="p">(</span><span class="n">edge</span><span class="p">)</span>
  <span class="p">{</span>
  <span class="k">case</span> <span class="n">RISING</span><span class="p">:</span>
    <span class="n">WriteFile</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s">"edge"</span><span class="p">,</span> <span class="s">"rising"</span><span class="p">);</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">stopWaitForButtonFlag</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">previousValueOnPin</span> <span class="o">=</span> <span class="n">ReadButton</span><span class="p">();</span> 
      <span class="k">if</span> <span class="p">(</span><span class="n">previousValueOnPin</span> <span class="o">==</span> <span class="n">LOW</span><span class="p">)</span>
        <span class="k">break</span><span class="p">;</span> 
    <span class="p">}</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">stopWaitForButtonFlag</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">ReadButton</span><span class="p">()</span> <span class="o">==</span> <span class="n">HIGH</span><span class="p">)</span>
        <span class="k">break</span><span class="p">;</span> 
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">previousValueOnPin</span> <span class="o">!=</span> <span class="n">valueOnPin</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">message</span> <span class="o">=</span> <span class="s">"A RISING edge was detected!"</span><span class="p">;</span>
      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Pink"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">break</span><span class="p">;</span>
  <span class="k">case</span> <span class="n">FALLING</span><span class="p">:</span>
    <span class="n">WriteFile</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s">"edge"</span><span class="p">,</span> <span class="s">"falling"</span><span class="p">);</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">stopWaitForButtonFlag</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">previousValueOnPin</span> <span class="o">=</span> <span class="n">ReadButton</span><span class="p">();</span> 
      <span class="k">if</span> <span class="p">(</span><span class="n">previousValueOnPin</span> <span class="o">==</span> <span class="n">HIGH</span><span class="p">)</span>
        <span class="k">break</span><span class="p">;</span> 
    <span class="p">}</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">stopWaitForButtonFlag</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">ReadButton</span><span class="p">()</span> <span class="o">==</span> <span class="n">LOW</span><span class="p">)</span>
        <span class="k">break</span><span class="p">;</span> 
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">previousValueOnPin</span> <span class="o">!=</span> <span class="n">valueOnPin</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">message</span> <span class="o">=</span> <span class="s">"A FALLING edge was detected!"</span><span class="p">;</span>
      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Pink"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">break</span><span class="p">;</span>
  <span class="k">case</span> <span class="n">BOTH</span><span class="p">:</span>
    <span class="n">WriteFile</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s">"edge"</span><span class="p">,</span> <span class="s">"both"</span><span class="p">);</span>
    <span class="n">previousValueOnPin</span> <span class="o">=</span> <span class="n">ReadButton</span><span class="p">();</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">stopWaitForButtonFlag</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">previousValueOnPin</span> <span class="o">!=</span> <span class="n">ReadButton</span><span class="p">())</span>
      <span class="p">{</span>
        <span class="n">message</span> <span class="o">=</span> <span class="s">"A RISING OR FALLING edge was detected!"</span><span class="p">;</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Yellow"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">break</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>The button can be declared as a <code class="language-plaintext highlighter-rouge">BUTTON</code> object
specifying the pin attached to it:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">BUTTON</span> <span class="nf">redButtonPin</span><span class="p">(</span><span class="n">P8_08</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>In the main program, only a single line makes to wait for the press of a button, 
before continue with the next line of code:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">redButtonPin</span><span class="p">.</span><span class="n">WaitForButton</span><span class="p">();</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="listing_32">Listing_3.2</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;iostream&gt;
#include "../../Sources/GPIO.h"
#include "../../Sources/BUTTON.h"
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">string</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"Main program starting here..."</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span><span class="s">"Blue"</span><span class="p">,</span> <span class="s">"White"</span><span class="p">,</span> <span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
  
  <span class="n">BUTTON</span> <span class="n">redButtonPin</span><span class="p">(</span><span class="n">P8_08</span><span class="p">);</span>
  <span class="n">message</span> <span class="o">=</span> <span class="s">"The program is waiting for a press on a Button</span><span class="se">\n</span><span class="s">Please, press the red button!"</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Red"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

  <span class="n">redButtonPin</span><span class="p">.</span><span class="n">WaitForButton</span><span class="p">();</span>
  <span class="n">message</span> <span class="o">=</span> <span class="s">"The red button was pressed!!!"</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Red"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
  
  <span class="n">message</span> <span class="o">=</span> <span class="s">"Main program finishes here..."</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span><span class="s">"Blue"</span><span class="p">,</span> <span class="s">"White"</span><span class="p">,</span><span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="execution-of-the-program">Execution of the program:</h3>
<figure style="text-align: center; width:100%; 
              margin-left: auto; 
              margin-right: auto;">
  <video width="100%" controls="" poster="../assets/images/Post18/VideoCover.png">
    <source src="../assets/images/Post18/Video.mp4" type="video/mp4" />
  </video>
  <figcaption>
    Video: Execution of the program.
  </figcaption>
</figure>

<p>Se you in the next post.</p>
:ET