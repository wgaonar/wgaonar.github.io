I"ûB<p>In this post, I will continue to show you how to read a button with the BeagleBone Black. In the <a href="/Post18-BeagleBone_ReadAButton-Part-II/"> second entry</a> I showed how to wait for the press of a button stopping the main program until a button has been pressed.</p>

<p>On the other hand, in this post, I show a new method named <code class="language-plaintext highlighter-rouge">WhenButtonWasPressed(*)</code> 
that executes a USER customized function when the button has been pressed.</p>

<h2 id="circuit-and-components">Circuit and components</h2>

<p>The circuit can be seen in Figure 1. Please keep in mind that the BeagleBone works at <font color="red">3.3V</font> and not 5V like microcontrollers as Arduino. It is so muy important to avoid damage to the board, especially when you are working with buttons or digital inputs in general.</p>

<p>The components are:</p>
<ul>
  <li>1 Resistor of 10KÎ© as a pull-down resistor</li>
  <li>1 Push button of 12mm</li>
  <li>Jumpers male-male to make the connections</li>
</ul>

<figure style="text-align: center; width:70%; 
              margin-left: auto; 
              margin-right: auto;">
    <img src="../assets/images/Post19/Circuit_bb.jpg" alt="Circuit_bb.jpg" width="100%" />
  <figcaption>
    Figure 1: Circuit to read the input from a button.
  </figcaption>
</figure>

<h2 id="coding">Coding</h2>

<p>The new method was added to the C++ class <code class="language-plaintext highlighter-rouge">BUTTON</code> which is derived from the <code class="language-plaintext highlighter-rouge">GPIO</code> class:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">WhenButtonWasPressed(*)</code></li>
</ul>

<p>For this, in the <code class="language-plaintext highlighter-rouge">BUTTON</code> class was defined a callbackType for the function pointer that will be used as an argument to the method. This can be done in the header file BUTTON.h with the next line:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="k">using</span> <span class="n">callbackType</span> <span class="o">=</span> <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="p">)();</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">WhenButtonWasPressed(*)</code> method receives a user customized function when the button has been pressed and creates a thread with a function pointer to that function which is executed in a <strong>parallel</strong> way to the main function in the program.  In this user customized function any other methods of the class can be called, for example: <code class="language-plaintext highlighter-rouge">WaitForButton()</code> without affect the behavior of the
main function.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">BUTTON</span><span class="o">::</span><span class="n">WhenButtonWasPressed</span><span class="p">(</span><span class="n">callbackType</span> <span class="n">callbackFunction</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">mode</span> <span class="o">!=</span> <span class="n">INPUT</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">perror</span><span class="p">(</span><span class="s">"'waitForButton' method only works on INPUT mode"</span><span class="p">);</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="n">string</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"'WhenButtonWasPressed' method has been activated!!!"</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Orange"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

  <span class="n">whenButtonWasPressedThread</span> <span class="o">=</span> <span class="kr">thread</span><span class="p">(</span><span class="n">callbackFunction</span><span class="p">);</span>

  <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>A new method named <code class="language-plaintext highlighter-rouge">StopWaitForButton()</code> was added to control the execution of the <code class="language-plaintext highlighter-rouge">WaitForButton()</code> method. This is done through a bool member variable <code class="language-plaintext highlighter-rouge">stopWaitForButtonFlag</code> that can be set with a the right timing to stop that method.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kt">void</span> <span class="n">BUTTON</span><span class="o">::</span><span class="n">StopWaitForButton</span><span class="p">(</span><span class="kt">bool</span> <span class="n">newStopWaitForButtonFlag</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">stopWaitForButtonFlag</span> <span class="o">=</span> <span class="n">newStopWaitForButtonFlag</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The button can be declared as a <strong>global</strong> <code class="language-plaintext highlighter-rouge">BUTTON</code> object specifying the pin attached to it:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">BUTTON</span> <span class="nf">redButtonPin</span><span class="p">(</span><span class="n">P8_08</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>In the main program, a user function can be defined to do some process, for example, wait for the press on the button:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="nf">UserCallBackFunction_ButtonRed</span><span class="p">()</span> 
<span class="p">{</span>
  <span class="n">string</span> <span class="n">message</span><span class="p">;</span>
  <span class="n">message</span> <span class="o">=</span> <span class="s">"Hello, I am a USER defined callback function!"</span><span class="p">;</span> 
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Orange"</span><span class="p">,</span> <span class="s">"Indigo"</span><span class="p">,</span> <span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

  <span class="kt">int</span> <span class="n">isButtonPushed</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="n">isButtonPushed</span> <span class="o">=</span> <span class="n">redButtonPin</span><span class="p">.</span><span class="n">WaitForButton</span><span class="p">();</span>
  
  <span class="k">if</span> <span class="p">(</span><span class="n">isButtonPushed</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">message</span> <span class="o">=</span> <span class="s">"The red button was pressed!!!"</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Red"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>   
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Just before the main program ends, the method
<code class="language-plaintext highlighter-rouge">StopWaitForButton()</code> has to be called in order
for joining and exiting the thread corresponding to the user defined function.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">redButtonPin</span><span class="p">.</span><span class="n">StopWaitForButton</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="complete-code">Complete code</h3>

<p>The next program will be pending for the press of a button and, at the same time is in a routine of delay for 5 seconds. Once the button has been pressed, a message is printed on the console. If the button was never pressed, the program ends after the 5 seconds.</p>

<h3 id="listing_33">Listing_3.3</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;iostream&gt;
#include &lt;chrono&gt;
</span>
<span class="cp">#include "../../Sources/GPIO.h"
#include "../../Sources/BUTTON.h"
#include "../../Sources/LED.h"
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">delayms</span><span class="p">(</span><span class="kt">int</span> <span class="n">millisecondsToSleep</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">this_thread</span><span class="o">::</span><span class="n">sleep_for</span><span class="p">(</span><span class="n">chrono</span><span class="o">::</span><span class="n">milliseconds</span><span class="p">(</span><span class="n">millisecondsToSleep</span><span class="p">));</span>
<span class="p">}</span>

<span class="c1">// Global pin declaration</span>
<span class="n">BUTTON</span> <span class="nf">redButtonPin</span><span class="p">(</span><span class="n">P8_08</span><span class="p">);</span>

<span class="kt">int</span> <span class="nf">UserCallBackFunction_ButtonRed</span><span class="p">()</span> 
<span class="p">{</span>
  <span class="n">string</span> <span class="n">message</span><span class="p">;</span>
  <span class="n">message</span> <span class="o">=</span> <span class="s">"Hello, I am a USER defined callback function!"</span><span class="p">;</span> 
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Orange"</span><span class="p">,</span> <span class="s">"Indigo"</span><span class="p">,</span> <span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

  <span class="kt">int</span> <span class="n">isButtonPushed</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="n">isButtonPushed</span> <span class="o">=</span> <span class="n">redButtonPin</span><span class="p">.</span><span class="n">WaitForButton</span><span class="p">();</span>
  
  <span class="k">if</span> <span class="p">(</span><span class="n">isButtonPushed</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">message</span> <span class="o">=</span> <span class="s">"The red button was pressed!!!"</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Red"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>   
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">string</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"Main function starting here..."</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span><span class="s">"Blue"</span><span class="p">,</span> <span class="s">"White"</span><span class="p">,</span> <span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
  
  <span class="n">message</span> <span class="o">=</span> <span class="s">"The program is timing for "</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Yellow"</span><span class="p">);</span>
  <span class="n">message</span> <span class="o">=</span> <span class="s">"5 seconds"</span><span class="p">;</span> 
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Yellow"</span><span class="p">,</span> <span class="s">"Default"</span><span class="p">,</span> <span class="s">"Blink"</span><span class="p">);</span>
  <span class="n">message</span> <span class="o">=</span> <span class="s">" and is pending if a press on a button occurs"</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Yellow"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

  <span class="n">redButtonPin</span><span class="p">.</span><span class="n">WhenButtonWasPressed</span><span class="p">(</span><span class="o">&amp;</span><span class="n">UserCallBackFunction_ButtonRed</span><span class="p">);</span>
  <span class="n">delayms</span><span class="p">(</span><span class="mi">5000</span><span class="p">);</span>

  <span class="n">redButtonPin</span><span class="p">.</span><span class="n">StopWaitForButton</span><span class="p">();</span>

  <span class="n">message</span> <span class="o">=</span> <span class="s">"Main function ends here..."</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span><span class="s">"Blue"</span><span class="p">,</span> <span class="s">"White"</span><span class="p">,</span><span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="execution-of-the-program">Execution of the program:</h3>
<figure style="text-align: center; width:100%; 
              margin-left: auto; 
              margin-right: auto;">
  <video width="100%" controls="" poster="../assets/images/Post19/VideoCover.png">
    <source src="../assets/images/Post19/Video.mp4" type="video/mp4" />
  </video>
  <figcaption>
    Video: Execution of the program.
  </figcaption>
</figure>

<p>Se you in the next post.</p>
:ET