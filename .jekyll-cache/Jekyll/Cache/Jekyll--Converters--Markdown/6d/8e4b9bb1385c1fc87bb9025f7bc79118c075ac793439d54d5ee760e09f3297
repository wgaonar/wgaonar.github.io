I"š6<p>In this post, I show how to control the position of a Servomotor <a href="http://www.ee.ic.ac.uk/pcheung/teaching/DE1_EE/stores/sg90_datasheet.pdf">SG90</a> with a potentiometer using the BeagleBone and the library that I have been written in C++ which you can find <a href="https://github.com/wgaonar/BeagleCPP">here</a> to control it</p>

<p>In the <a href="/Post42-BeagleBone_SG90_Sweep/">last post</a>, I showed the technical details about how this servomotor works and how can be controlled with the BeagleBone Black for doing a sweep.</p>

<p>It is important to remember that the logic voltage for the BeagleBone is <font color="red">3.3V</font>. If the user provides a greater voltage, the BeagleBone could be damaged. Furthermore, if your servo is like the SG90, which needs 4.8V or more, you should provide an <font color="red">external power</font> source, wiring its ground to the BeagleBoneâ€™s ground.</p>

<h2 id="circuit-and-components">Circuit and components</h2>

<p>The circuit can be seen in Figure 1. It consists of an SG90 servomotor, 1 Potentiometer, 4 AA batteries, and the BeagleBone.</p>

<figure style="text-align: center; 
              margin-left: auto; 
              margin-right: auto;">
    <img src="../assets/images/Post44/Circuit.png" alt="Circuit.png" width="100%" />
  <figcaption>
    Figure 1: Circuit to control a servomotor SG90.
  </figcaption>
</figure>

<p>The components are:</p>
<ul>
  <li>1 Servomotor SG90 4.8 - 6.0V</li>
  <li>1 Potentiometer 10KÎ©</li>
  <li>4 AA Batteries</li>
  <li>1 Protoboard mini</li>
  <li>Jumpers male-male to make the connections</li>
</ul>

<p>The PWM pin to control the servomotor is:</p>
<ul>
  <li>PWM P8_13</li>
</ul>

<p>The ADC pin to read the potentiometer is:</p>
<ul>
  <li>ADC P9_39</li>
</ul>

<h2 id="coding">Coding</h2>

<p>Some <code class="language-plaintext highlighter-rouge">Servo</code> and <code class="language-plaintext highlighter-rouge">ADC</code> objects are declared with global scope to initialize the servomotor and the pin from which the potentiometer will be attached to.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="c1">// Declare the Servo object</span>
<span class="n">Servo</span> <span class="nf">myServo</span><span class="p">(</span><span class="n">P8_13</span><span class="p">);</span>

<span class="c1">// Declare the ADC pin to attach the potentiometer</span>
<span class="n">ADC</span> <span class="nf">myPotentiometer</span><span class="p">(</span><span class="n">P9_39</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>This <code class="language-plaintext highlighter-rouge">Servo</code> object is initialized with default values of 544444 and 2500000 for the minimum and maximum pulse width, respectively. It is important to note that the pulse width units in the BeagleBone are in <font color="red">nanoseconds</font> instead of milliseconds. For this reason, these default values are used, instead of the typical values of 544 and 2500 which are in microseconds and are used in the Arduino <a href="https://www.arduino.cc/reference/en/libraries/servo/attach/">attach()</a> function.</p>

<p>Three global variables are defined and initialized to disable the servo movement, store the reading coming from the potentiometer, and store the desired angle, respectively.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="c1">// Global variables</span>
<span class="kt">bool</span> <span class="n">stopMoveServo</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">adcValueOut</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">angle</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>To control the servomotor position from the potentiometer, the <code class="language-plaintext highlighter-rouge">ReadADC()</code> method is used and store in the <code class="language-plaintext highlighter-rouge">adcValueOut</code> variable. Then, this value which is between 0 - 4095, is mapped to the range of the servomotor angles, i.e. 0Â°- 180Â° and store in the <code class="language-plaintext highlighter-rouge">angle</code> variable.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="c1">// Read the analog converted value</span>
<span class="n">adcValueOut</span> <span class="o">=</span> <span class="n">myPotentiometer</span><span class="p">.</span><span class="n">ReadADC</span><span class="p">();</span>

<span class="c1">// Map the adc value to the angle</span>
<span class="n">angle</span> <span class="o">=</span> <span class="n">adcValueOut</span> <span class="o">/</span> <span class="mf">4095.0</span> <span class="o">*</span> <span class="mi">180</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>To rotate the servo you can use the <code class="language-plaintext highlighter-rouge">SetAngle()</code> method which receives the angle en degrees and makes the mapping between this value to the corresponding pulse width that will be sent to the PWM pin.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">myServo</span><span class="p">.</span><span class="n">SetAngle</span><span class="p">(</span><span class="n">angle</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The last lines of code are inside a callback function in order to do these processes in background while th e <code class="language-plaintext highlighter-rouge">stopMoveServo</code> variable will be <code class="language-plaintext highlighter-rouge">true</code>. This callback function is activated on the <code class="language-plaintext highlighter-rouge">ADC</code> object, in this case, the <code class="language-plaintext highlighter-rouge">myPotentiometer</code> object</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="c1">// Activate the ADC object's callback function</span>
<span class="n">myPotentiometer</span><span class="p">.</span><span class="n">DoUserFunction</span><span class="p">(</span><span class="o">&amp;</span><span class="n">MoveServo</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The complete code for this implementation is shown in the next listing:</p>

<h3 id="sg90_13cpp">SG90_1.3.cpp</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
</pre></td><td class="rouge-code"><pre><span class="cm">/******************************************************************************
SG90_1.3.cpp
@wgaonar
28/07/2021
https://github.com/wgaonar/BeagleCPP

- Move a servo with the readings from a potentiometer 

Class:Servo
******************************************************************************/</span>
<span class="cp">#include &lt;iostream&gt;
#include "../../../Sources/Servo.h"
#include "../../../Sources/ADC.h"
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="c1">// Declare the Servo object</span>
<span class="n">Servo</span> <span class="nf">myServo</span><span class="p">(</span><span class="n">P8_13</span><span class="p">);</span>

<span class="c1">// Declare the ADC pin to attach the potentiometer</span>
<span class="n">ADC</span> <span class="nf">myPotentiometer</span><span class="p">(</span><span class="n">P9_39</span><span class="p">);</span>

<span class="c1">// Global variables</span>
<span class="kt">bool</span> <span class="n">stopMoveServo</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">adcValueOut</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">angle</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="c1">// Function to move the servo in background</span>
<span class="kt">int</span> <span class="nf">MoveServo</span><span class="p">()</span> 
<span class="p">{</span>
  <span class="k">while</span> <span class="p">(</span><span class="n">stopMoveServo</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="c1">// Read the analog converted value</span>
    <span class="n">adcValueOut</span> <span class="o">=</span> <span class="n">myPotentiometer</span><span class="p">.</span><span class="n">ReadADC</span><span class="p">();</span>

    <span class="c1">// Map the adc value to the angle</span>
    <span class="n">angle</span> <span class="o">=</span> <span class="n">adcValueOut</span> <span class="o">/</span> <span class="mf">4095.0</span> <span class="o">*</span> <span class="mi">180</span><span class="p">;</span>

    <span class="c1">// Move the servo</span>
    <span class="n">myServo</span><span class="p">.</span><span class="n">SetAngle</span><span class="p">(</span><span class="n">angle</span><span class="p">);</span>

    <span class="n">Delayms</span><span class="p">(</span><span class="mi">250</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">string</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"Main program starting here..."</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span><span class="s">"Blue"</span><span class="p">,</span> <span class="s">"White"</span><span class="p">,</span> <span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

  <span class="c1">// Activate the ADC object's callback function</span>
  <span class="n">myPotentiometer</span><span class="p">.</span><span class="n">DoUserFunction</span><span class="p">(</span><span class="o">&amp;</span><span class="n">MoveServo</span><span class="p">);</span>

  <span class="kt">char</span> <span class="n">userInput</span> <span class="o">=</span> <span class="sc">'\0'</span><span class="p">;</span>
  <span class="k">while</span> <span class="p">(</span><span class="n">userInput</span> <span class="o">!=</span> <span class="sc">'y'</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">message</span> <span class="o">=</span> <span class="s">"Enter an option 'y' for exit: "</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Blue"</span><span class="p">);</span>
    
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">userInput</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">userInput</span> <span class="o">==</span> <span class="sc">'y'</span><span class="p">)</span> 
      <span class="n">stopMoveServo</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="n">message</span> <span class="o">=</span> <span class="s">"Main program finishes here..."</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span><span class="s">"Blue"</span><span class="p">,</span> <span class="s">"White"</span><span class="p">,</span><span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="execution-of-the-program">Execution of the program:</h3>
<figure style="text-align: center; width:100%; 
              margin-left: auto; 
              margin-right: auto;">
  <video width="100%" controls="" poster="../assets/images/Post44/VideoCover-SG90_1.3.png">
    <source src="../assets/images/Post44/SG90_1.3.mp4" type="video/mp4" />
  </video>
  <figcaption>
    Video: Execution of the program.
  </figcaption>
</figure>

<p>Se you in the next post.</p>
:ET