I"…2<p>In this post, I will show you how to read a button with the BeagleBone Black. I have written a <a href="/Post12-BeagleBone_ButtonLed/"> previous post</a> that shows the same behavior. The difference with this post is that here, I have written a C++ class that contains specific methods to work with buttons. This class is part of the C++ library to access and control the general purpose digital pins (GPIO) pins of the BeagleBone that I started to work in and described in these posts <a href="/Post10-BeagleBone_GPIOClass/"> BeagleBone GPIO C++ class </a> and <a href="/Post16-BeagleBone_BUTTONClass/"> BeagleBone Button C++ Class</a></p>

<h1 id="circuit-and-components">Circuit and components</h1>

<p>The circuit can be seen in Figure 1. Please keep in mind that the BeagleBone works at <font color="red">3.3V</font> and not 5V like microcontrollers as Arduino. It is so muy important to avoid damage to the board, especially when you are working with buttons or digital inputs in general.</p>

<p>The components are:</p>
<ul>
  <li>1 Resistor of 10KÎ© as a pull-down resistor</li>
  <li>1 Push button of 12mm</li>
  <li>Jumpers male-male to make the connections</li>
</ul>

<figure style="text-align: center; width:70%; 
              margin-left: auto; 
              margin-right: auto;">
    <img src="../assets/images/Post17/Circuit_bb.jpg" alt="Circuit_bb.jpg" width="100%" />
  <figcaption>
    Figure 1: Circuit to read the input from a button.
  </figcaption>
</figure>

<h1 id="coding">Coding</h1>

<p>The corresponding method to read a button into the class <b>BUTTON</b> 
who is derived from GPIO class mentioned earlier in the introduction. The method is:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ReadButton()</code></li>
</ul>

<p>The <code class="language-plaintext highlighter-rouge">ReadButton()</code> method checks that the GPIO has been set up as INPUT
and returns the value of the pin that is attached to the button. This is done through a call to the 
<code class="language-plaintext highlighter-rouge">DigitalRead()</code> method of the GPIO class.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">BUTTON</span><span class="o">::</span><span class="n">ReadButton</span><span class="p">()</span>
<span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">mode</span> <span class="o">!=</span> <span class="n">INPUT</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">perror</span><span class="p">(</span><span class="s">"'ReadButton' method only works on INPUT mode"</span><span class="p">);</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">DigitalRead</span><span class="p">();</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>The button can be declared as a <code class="language-plaintext highlighter-rouge">BUTTON</code> object
specifying the pin attached to it:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">BUTTON</span> <span class="nf">redButtonPin</span><span class="p">(</span><span class="n">P8_08</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>In the main program a while loop can wait for the press of the button:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="k">while</span> <span class="p">(</span><span class="n">redButtonPin</span><span class="p">.</span><span class="n">ReadButton</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">redButtonPin</span><span class="p">.</span><span class="n">ReadButton</span><span class="p">()</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">message</span> <span class="o">=</span> <span class="s">"The red button was pressed!!!"</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Red"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="complete-code">Complete code</h2>

<p>The code is shown in the next listings:</p>

<h3 id="buttonh">BUTTON.h</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="cp">#ifndef BUTTON_H
#define BUTTON_H
</span>
<span class="cp">#include "GPIO.h"
</span>
<span class="k">class</span> <span class="nc">BUTTON</span> <span class="o">:</span> <span class="k">public</span> <span class="n">GPIO</span>
<span class="p">{</span>
  <span class="nl">public:</span>
    <span class="c1">// Overload constructor</span>
    <span class="n">BUTTON</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>

    <span class="c1">// Interface method to get the GPIO pin state</span>
    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">ReadButton</span><span class="p">();</span>

    <span class="o">~</span><span class="n">BUTTON</span><span class="p">();</span>
<span class="p">};</span>

<span class="cp">#endif // BUTTON_H
</span></pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="buttoncpp">BUTTON.cpp</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;iostream&gt;
</span>
<span class="cp">#include "BUTTON.h"
#include "RAINBOWCOLORS.h"
</span>
<span class="c1">// Overload constructor</span>
<span class="n">BUTTON</span><span class="o">::</span><span class="n">BUTTON</span><span class="p">(</span><span class="kt">int</span> <span class="n">newId</span><span class="p">)</span> <span class="o">:</span> <span class="n">GPIO</span><span class="p">(</span><span class="n">newId</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">)</span> <span class="p">{}</span>

<span class="cm">/*
  Public method for reading the input from a button
  @return int:   The button state HIGH / LOW
                -1 Error in the pin's mode
*/</span>
<span class="kt">int</span> <span class="n">BUTTON</span><span class="o">::</span><span class="n">ReadButton</span><span class="p">()</span>
<span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">mode</span> <span class="o">!=</span> <span class="n">INPUT</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">perror</span><span class="p">(</span><span class="s">"'ReadButton' method only works on INPUT mode"</span><span class="p">);</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">DigitalRead</span><span class="p">();</span>
<span class="p">}</span>

<span class="c1">// Destructor</span>
<span class="n">BUTTON</span><span class="o">::~</span><span class="n">BUTTON</span><span class="p">()</span>
<span class="p">{}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="listing_31">Listing_3.1</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;iostream&gt;
#include "../../Sources/GPIO.h"
#include "../../Sources/BUTTON.h"
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">string</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"Main program starting here..."</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span><span class="s">"Blue"</span><span class="p">,</span> <span class="s">"White"</span><span class="p">,</span> <span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
  
  <span class="n">BUTTON</span> <span class="n">redButtonPin</span><span class="p">(</span><span class="n">P8_08</span><span class="p">);</span>
  <span class="n">message</span> <span class="o">=</span> <span class="s">"Please, press the red button!"</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Red"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

  <span class="k">while</span> <span class="p">(</span><span class="n">redButtonPin</span><span class="p">.</span><span class="n">ReadButton</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">redButtonPin</span><span class="p">.</span><span class="n">ReadButton</span><span class="p">()</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">message</span> <span class="o">=</span> <span class="s">"The red button was pressed!!!"</span><span class="p">;</span>
      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Red"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="n">message</span> <span class="o">=</span> <span class="s">"Main program finishes here..."</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span><span class="s">"Blue"</span><span class="p">,</span> <span class="s">"White"</span><span class="p">,</span><span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="execution-of-the-program">Execution of the program:</h3>
<figure style="text-align: center; width:100%; 
              margin-left: auto; 
              margin-right: auto;">
  <video width="100%" controls="" poster="../assets/images/Post17/VideoCover.png">
    <source src="../assets/images/Post17/Video.mp4" type="video/mp4" />
  </video>
  <figcaption>
    Video: Execution of the program.
  </figcaption>
</figure>

<p>Se you in the next post.</p>
:ET