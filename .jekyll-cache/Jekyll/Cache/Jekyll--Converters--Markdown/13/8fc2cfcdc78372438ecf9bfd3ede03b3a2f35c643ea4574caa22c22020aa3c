I"ÅA<p>In this post, I show how to read and store the keypad pressed buttons sequence in a vector. In the <a href="/Post47-BeagleBone_KeyPad/">last post</a>, I showed how to read the signal from the keypad <a href="https://www.pcbway.com/project/shareproject/E_KEYPAD_2_2.html">E_KEYPAD_2_2</a> designed by Xabier Rosas. Now, I show how to read and store a movements sequence in a <code class="language-plaintext highlighter-rouge">vector</code>.</p>

<p>It is important to remember that the maximum voltage that can be read by the analog to digital conversion (ADC) module in the BeagleBone is <font color="red">1.8V</font>. For reference, in <a href="/Post25-BeagleBoneReadADC/">this post</a>, I showed how to use the BeagleBone ADC module. The pins <code class="language-plaintext highlighter-rouge">P9_32</code> and <code class="language-plaintext highlighter-rouge">P9_34</code>, <code class="language-plaintext highlighter-rouge">VDD_ADC</code> and <code class="language-plaintext highlighter-rouge">GND_ADC</code> respectively, can be used to power the keypad and obtain voltage values between 0.9V and 1.5V that can be used to distinguish which of the 5 buttons was pressed.</p>

<h2 id="circuit-and-components">Circuit and components</h2>

<p>The circuit can be seen in Figure 1. It consists of the keypad and the BeagleBone. Note that to power the keypad, the VDD_ADC, and GND_ADC pins are used.</p>

<figure style="text-align: center; 
              margin-left: auto; 
              margin-right: auto;">
    <img src="../assets/images/Post48/Circuit.png" alt="Circuit.png" width="100%" />
  <figcaption>
    Figure 1: Circuit to read the signal from a analog keypad with 5 buttons.
  </figcaption>
</figure>

<p>The components are:</p>
<ul>
  <li>1 Analog keypad <a href="https://www.pcbway.com/project/shareproject/E_KEYPAD_2_2.html">E_KEYPAD_2_2&lt;/a</a></li>
  <li>Jumpers female-male to make the connections</li>
</ul>

<h2 id="coding">Coding</h2>

<p>One <code class="language-plaintext highlighter-rouge">ADC</code> and four <code class="language-plaintext highlighter-rouge">LED</code> objects are declared with global scope to initialize the pines used by the keypad. The first pin is the ADC pin used to read the signal that comes from the voltage divider. The next 4 pines are the digital pines used to turn ON the LEDs when a button is pressed. Right away, The <code class="language-plaintext highlighter-rouge">KEYPAD_5BUTTONS</code> object is declared and initialized with the previous objects.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="c1">// Global pin objects instantiation</span>
<span class="n">ADC</span> <span class="nf">VoutPin</span><span class="p">(</span><span class="n">P9_38</span><span class="p">);</span>
<span class="n">LED</span> <span class="nf">blueLedPin</span><span class="p">(</span><span class="n">P9_11</span><span class="p">);</span>
<span class="n">LED</span> <span class="nf">redLedPin</span><span class="p">(</span><span class="n">P9_18</span><span class="p">);</span>
<span class="n">LED</span> <span class="nf">yellowLedPin</span><span class="p">(</span><span class="n">P9_13</span><span class="p">);</span>
<span class="n">LED</span> <span class="nf">greenLedPin</span><span class="p">(</span><span class="n">P9_12</span><span class="p">);</span>

<span class="c1">// Global KEYPAD_5BUTTONS object instantiation</span>
<span class="n">KEYPAD_5BUTTONS</span> <span class="nf">myKeyPad</span> <span class="p">(</span><span class="n">VoutPin</span><span class="p">,</span> <span class="n">blueLedPin</span><span class="p">,</span> <span class="n">redLedPin</span><span class="p">,</span> <span class="n">yellowLedPin</span><span class="p">,</span> <span class="n">greenLedPin</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Two global variables are defined and initialized. The first one is a <code class="language-plaintext highlighter-rouge">COMMAND</code> type. This is an <code class="language-plaintext highlighter-rouge">enum</code> type defined in the <code class="language-plaintext highlighter-rouge">KEYPAD_5BUTTONS</code> class and is used to store the command value returned when a button is pressed. The defined values that can take are <code class="language-plaintext highlighter-rouge">FORWARD</code>, <code class="language-plaintext highlighter-rouge">LEFT</code>, <code class="language-plaintext highlighter-rouge">BACKWARD</code>, <code class="language-plaintext highlighter-rouge">GO</code>, <code class="language-plaintext highlighter-rouge">RIGHT</code>, and <code class="language-plaintext highlighter-rouge">NOT_IDENTIFIED</code>. The second, is the <code class="language-plaintext highlighter-rouge">vector</code> where the pressed buttons,i.e. the <code class="language-plaintext highlighter-rouge">COMMAND</code> sequence, will be stored. In this case, this is the vector <code class="language-plaintext highlighter-rouge">movements</code>.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="c1">// Global Variables</span>
<span class="n">COMMAND</span> <span class="n">command</span> <span class="o">=</span> <span class="n">NOT_IDENTIFIED</span><span class="p">;</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="n">COMMAND</span><span class="o">&gt;</span> <span class="n">movements</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>A <code class="language-plaintext highlighter-rouge">while</code> cycle is used to read the keypad signal each 250ms while the read <code class="language-plaintext highlighter-rouge">command</code> will be different from the <code class="language-plaintext highlighter-rouge">GO</code> option, i.e., while the pressed button will be different from the white button located at the keypad‚Äôs center. Each time, the read command will be stored in the last position in the vector <code class="language-plaintext highlighter-rouge">movements</code>.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="n">command</span> <span class="o">=</span> <span class="n">myKeyPad</span><span class="p">.</span><span class="n">ReadPushedButton</span><span class="p">();</span>
<span class="k">while</span> <span class="p">(</span><span class="n">command</span> <span class="o">!=</span> <span class="n">GO</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">command</span> <span class="o">!=</span> <span class="n">NOT_IDENTIFIED</span><span class="p">)</span>
    <span class="n">movements</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">command</span><span class="p">);</span>
  <span class="n">Delayms</span><span class="p">(</span><span class="mi">250</span><span class="p">);</span>
  <span class="n">command</span> <span class="o">=</span> <span class="n">myKeyPad</span><span class="p">.</span><span class="n">ReadPushedButton</span><span class="p">();</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Once a command <code class="language-plaintext highlighter-rouge">GO</code> was detected the entered sequence is printed in the screen from the first read command to the last entered by the user.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"The entered sequence of movements was: </span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">movements</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">index</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Movement["</span> <span class="o">&lt;&lt;</span> <span class="n">index</span> <span class="o">&lt;&lt;</span> <span class="s">"] = "</span><span class="p">;</span>
  <span class="n">cout</span>  <span class="o">&lt;&lt;</span> <span class="n">movements</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> 
        <span class="o">&lt;&lt;</span> <span class="s">" ("</span> <span class="o">&lt;&lt;</span> <span class="n">myKeyPad</span><span class="p">.</span><span class="n">GetCommandName</span><span class="p">(</span><span class="n">movements</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">index</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="s">")"</span> 
        <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The complete code for this implementation is shown in the next listing:</p>

<h3 id="keypad_5buttons_12cpp">KEYPAD_5BUTTONS_1.2.cpp</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
</pre></td><td class="rouge-code"><pre><span class="cm">/******************************************************************************
KEYPAD_5BUTTONS_1.2.cpp
@wgaonar
24/10/2021
https://github.com/wgaonar/BeagleCPP

Read and store the keypad pressed buttons sequence in a vector.

Class: KEYPAD_5BUTTONS
******************************************************************************/</span>

<span class="cp">#include &lt;iostream&gt;
#include &lt;vector&gt;
</span>
<span class="cp">#include "../../../Sources/KEYPAD_5BUTTONS.h"
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="c1">// Global pin objects instantiation</span>
<span class="n">ADC</span> <span class="nf">VoutPin</span><span class="p">(</span><span class="n">P9_38</span><span class="p">);</span>
<span class="n">LED</span> <span class="nf">blueLedPin</span><span class="p">(</span><span class="n">P9_11</span><span class="p">);</span>
<span class="n">LED</span> <span class="nf">redLedPin</span><span class="p">(</span><span class="n">P9_18</span><span class="p">);</span>
<span class="n">LED</span> <span class="nf">yellowLedPin</span><span class="p">(</span><span class="n">P9_13</span><span class="p">);</span>
<span class="n">LED</span> <span class="nf">greenLedPin</span><span class="p">(</span><span class="n">P9_12</span><span class="p">);</span>

<span class="c1">// Global KEYPAD_5BUTTONS object instantiation</span>
<span class="n">KEYPAD_5BUTTONS</span> <span class="nf">myKeyPad</span> <span class="p">(</span><span class="n">VoutPin</span><span class="p">,</span> <span class="n">blueLedPin</span><span class="p">,</span> <span class="n">redLedPin</span><span class="p">,</span> <span class="n">yellowLedPin</span><span class="p">,</span> <span class="n">greenLedPin</span><span class="p">);</span>

<span class="c1">// Global Variables</span>
<span class="n">COMMAND</span> <span class="n">command</span> <span class="o">=</span> <span class="n">NOT_IDENTIFIED</span><span class="p">;</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="n">COMMAND</span><span class="o">&gt;</span> <span class="n">movements</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">string</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"Main program starting here..."</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span><span class="s">"Blue"</span><span class="p">,</span> <span class="s">"White"</span><span class="p">,</span> <span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

  <span class="n">command</span> <span class="o">=</span> <span class="n">myKeyPad</span><span class="p">.</span><span class="n">ReadPushedButton</span><span class="p">();</span>
  <span class="k">while</span> <span class="p">(</span><span class="n">command</span> <span class="o">!=</span> <span class="n">GO</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">command</span> <span class="o">!=</span> <span class="n">NOT_IDENTIFIED</span><span class="p">)</span>
      <span class="n">movements</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">command</span><span class="p">);</span>
    <span class="n">Delayms</span><span class="p">(</span><span class="mi">250</span><span class="p">);</span>
    <span class="n">command</span> <span class="o">=</span> <span class="n">myKeyPad</span><span class="p">.</span><span class="n">ReadPushedButton</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"The entered sequence of movements was: </span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">movements</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">index</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Movement["</span> <span class="o">&lt;&lt;</span> <span class="n">index</span> <span class="o">&lt;&lt;</span> <span class="s">"] = "</span><span class="p">;</span>
    <span class="n">cout</span>  <span class="o">&lt;&lt;</span> <span class="n">movements</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> 
          <span class="o">&lt;&lt;</span> <span class="s">" ("</span> <span class="o">&lt;&lt;</span> <span class="n">myKeyPad</span><span class="p">.</span><span class="n">GetCommandName</span><span class="p">(</span><span class="n">movements</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">index</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="s">")"</span> 
          <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="n">message</span> <span class="o">=</span> <span class="s">"Main program finishes here..."</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span><span class="s">"Blue"</span><span class="p">,</span> <span class="s">"White"</span><span class="p">,</span><span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Se you in the next post.</p>
:ET