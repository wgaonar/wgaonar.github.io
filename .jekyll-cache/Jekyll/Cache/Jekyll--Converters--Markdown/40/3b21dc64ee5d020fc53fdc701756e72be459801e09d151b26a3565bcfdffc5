I"î<p>In this post, I show some updates to the library explained previously in:</p>
<ul>
  <li><a href="/Post10-BeagleBone_GPIOClass/"> GPIO Class</a></li>
  <li><a href="/Post13-BeagleBone_LEDClass/"> LED Class</a></li>
  <li><a href="/Post16-BeagleBone_BUTTONClass/"> Button Class</a></li>
  <li><a href="/Post21-BeagleBone_PWMClass/"> PWM Class</a></li>
  <li><a href="/Post24-BeagleBone_ADCClass/"> ADC Class</a></li>
</ul>

<h2 id="main-updates">Main Updates</h2>

<ul>
  <li>The first is the addition of a specific class to manage the access methods to de system files in the BeagleBone. It was called SYSFILEACCESS and contains writing and reading methods.</li>
  <li>A new header and application file were added. It was called RAINBOWCOLORS and contains an overloaded function to let the terminal output be colored.</li>
  <li>A new header file called BLACKPIN_ID was added. It contains an <code class="language-plaintext highlighter-rouge">enum</code> structure to identify the header GPIO pins location with the kernel GPIO location in the AM335x processor for the BeagleBone Black. In a possible future, an extension to the Green and Blue BeagleBones could be added with new files, and its the corresponding mapping between header and kernel pinâ€™s name.</li>
  <li>The code in the <code class="language-plaintext highlighter-rouge">Destructor</code> in each class was reduced to avoid unsetting the pin when it inheritance is used through the applications</li>
</ul>

<p>The complete code for these files are shown in the next listings.</p>

<h3 id="sysfileaccessh">SYSFILEACCESS.h</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre><span class="cp">#ifndef SYSFILEACCESS_H
#define SYSFILEACCESS_H
</span>
<span class="cp">#include &lt;string&gt;
</span>
<span class="k">class</span> <span class="nc">SYSFILEACCESS</span>  
<span class="p">{</span>
  <span class="nl">public:</span>
    <span class="c1">// Method to write a system file</span>
    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">WriteFile</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">);</span>

    <span class="c1">// Overload Method to write a system file</span>
    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">WriteFile</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>

    <span class="c1">// Method to read a system file</span>
    <span class="k">virtual</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">ReadFile</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">);</span>

    <span class="c1">// Overload method to read a system file</span>
    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">ReadFile</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">);</span>
<span class="p">};</span>

<span class="cp">#endif // SYSFILEACCESS_H
</span></pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="sysfileaccesscpp">SYSFILEACCESS.cpp</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;iostream&gt;
</span>  <span class="cp">#include &lt;fstream&gt;
</span>  <span class="cp">#include &lt;string&gt;
</span>  <span class="cp">#include &lt;chrono&gt; // chrono::milliseconds()
</span>  <span class="cp">#include &lt;thread&gt; // this_thread::sleep_for()
</span>  <span class="cp">#include &lt;exception&gt;
</span>  
  <span class="cp">#include "SYSFILEACCESS.h"
</span>  
  <span class="k">class</span> <span class="nc">SYSFILEACCESS_Exception</span> <span class="o">:</span> <span class="k">public</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span> 
  <span class="p">{</span>
    <span class="nl">private:</span>
      <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">reason</span><span class="p">;</span>
    <span class="nl">public:</span>
      <span class="n">SYSFILEACCESS_Exception</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">why</span><span class="p">)</span> <span class="o">:</span> <span class="n">reason</span> <span class="p">(</span><span class="n">why</span><span class="p">)</span> <span class="p">{};</span>
      <span class="k">virtual</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">what</span><span class="p">()</span>
      <span class="p">{</span>
        <span class="k">return</span> <span class="n">reason</span><span class="p">.</span><span class="n">c_str</span><span class="p">();</span>
      <span class="p">}</span>
  <span class="p">};</span>
  
  <span class="cm">/*
    Public method that writes a string value to a file in the path provided
    @param String path: The file system path to be modified
    @param String feature: The name of file to be written
    @param string value: The value to be written to in the file
    @return int: 1 written has succeeded
  */</span>
  <span class="kt">int</span> <span class="n">SYSFILEACCESS</span><span class="o">::</span><span class="n">WriteFile</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">path</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">feature</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">value</span><span class="p">)</span> 
  <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">fileName</span> <span class="o">=</span> <span class="n">path</span> <span class="o">+</span> <span class="n">feature</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">ofstream</span> <span class="n">file</span><span class="p">(</span><span class="n">fileName</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ios_base</span><span class="o">::</span><span class="n">out</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">file</span><span class="p">.</span><span class="n">is_open</span><span class="p">())</span>
    <span class="p">{</span>
      <span class="n">file</span> <span class="o">&lt;&lt;</span> <span class="n">value</span><span class="p">;</span>
      <span class="n">file</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
      <span class="n">std</span><span class="o">::</span><span class="n">this_thread</span><span class="o">::</span><span class="n">sleep_for</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">milliseconds</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span>
      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span> 
    <span class="p">}</span> 
    <span class="k">else</span> 
    <span class="p">{</span>
      <span class="n">perror</span><span class="p">((</span><span class="s">"Error while opening file: "</span> <span class="o">+</span> <span class="n">fileName</span><span class="p">).</span><span class="n">c_str</span><span class="p">());</span>
      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="cm">/*
    Public method that writes a string value to a file in the path provided
    @param string path: The file system path to be modified
    @param string feature: The name of file to be written
    @param int value: The value to be written to in the file
    @return int: 1 written has succeeded
  */</span>
  <span class="kt">int</span> <span class="n">SYSFILEACCESS</span><span class="o">::</span><span class="n">WriteFile</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">path</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">feature</span><span class="p">,</span> <span class="kt">int</span> <span class="n">value</span><span class="p">)</span> 
  <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">fileName</span> <span class="o">=</span> <span class="n">path</span> <span class="o">+</span> <span class="n">feature</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">ofstream</span> <span class="n">file</span><span class="p">(</span><span class="n">fileName</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ios_base</span><span class="o">::</span><span class="n">out</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">file</span><span class="p">.</span><span class="n">is_open</span><span class="p">())</span>
    <span class="p">{</span>
      <span class="n">file</span> <span class="o">&lt;&lt;</span> <span class="n">value</span><span class="p">;</span>
      <span class="n">file</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
      <span class="n">std</span><span class="o">::</span><span class="n">this_thread</span><span class="o">::</span><span class="n">sleep_for</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">milliseconds</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span>
      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span> 
    <span class="k">else</span>
    <span class="p">{</span>
      <span class="n">perror</span><span class="p">((</span><span class="s">"Error while opening file: "</span> <span class="o">+</span> <span class="n">fileName</span><span class="p">).</span><span class="n">c_str</span><span class="p">());</span>
      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span> 
  <span class="p">}</span>
  
  <span class="cm">/*
    Public method that read a file in the path provided
    @param String path: The sysfs path of the file to be read
    @param String feature: The file to be read to in that path
    @return string: The read value / "-1" if there was an error
  */</span>
  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">SYSFILEACCESS</span><span class="o">::</span><span class="n">ReadFile</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">path</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">feature</span><span class="p">)</span> 
  <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">fileName</span><span class="p">;</span>
    <span class="n">fileName</span> <span class="o">=</span> <span class="n">path</span> <span class="o">+</span> <span class="n">feature</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">ifstream</span> <span class="n">file</span><span class="p">(</span><span class="n">fileName</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ios_base</span><span class="o">::</span><span class="n">in</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">file</span><span class="p">.</span><span class="n">is_open</span><span class="p">())</span> 
    <span class="p">{</span>
      <span class="n">perror</span><span class="p">((</span><span class="s">"Error while opening file: "</span> <span class="o">+</span> <span class="n">fileName</span><span class="p">).</span><span class="n">c_str</span><span class="p">());</span>
      <span class="k">return</span> <span class="s">"-1"</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">value</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">file</span><span class="p">,</span><span class="n">value</span><span class="p">);</span>
    <span class="c1">//if (file.bad())</span>
    <span class="c1">//  perror(("Error while reading file: " + fileName).c_str());</span>
    <span class="n">file</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
    <span class="k">return</span> <span class="n">value</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="cm">/*
    Public method that read a file in the path provided
    @param String path: The sysfs path of the file to be read
    @return int: The read value / "-1" if there was an error
  */</span>
  <span class="kt">int</span> <span class="n">SYSFILEACCESS</span><span class="o">::</span><span class="n">ReadFile</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">path</span><span class="p">)</span> 
  <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">fileName</span><span class="p">;</span>
    <span class="n">fileName</span> <span class="o">=</span> <span class="n">path</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">ifstream</span> <span class="n">file</span><span class="p">(</span><span class="n">fileName</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ios_base</span><span class="o">::</span><span class="n">in</span><span class="p">);</span>
  
    <span class="k">if</span> <span class="p">(</span><span class="n">file</span><span class="p">.</span><span class="n">is_open</span><span class="p">())</span>
    <span class="p">{</span>
      <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">value</span><span class="p">;</span>
      <span class="n">getline</span><span class="p">(</span><span class="n">file</span><span class="p">,</span><span class="n">value</span><span class="p">);</span>
      <span class="n">file</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
      <span class="n">std</span><span class="o">::</span><span class="n">this_thread</span><span class="o">::</span><span class="n">sleep_for</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">milliseconds</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span>
      <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">stoi</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
    <span class="p">}</span> 
    <span class="k">else</span>
    <span class="p">{</span>
      <span class="n">perror</span><span class="p">((</span><span class="s">"Error while opening file: "</span> <span class="o">+</span> <span class="n">fileName</span><span class="p">).</span><span class="n">c_str</span><span class="p">());</span>
      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="rainbowcolorsh">RAINBOWCOLORS.h</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="cp">#ifndef RAINBOWCOLORS_H
#define RAINBOWCOLORS_H
</span>
<span class="cp">#include &lt;string&gt;
#include &lt;map&gt;
</span>
<span class="cm">/*
General format to color the text in the terminal:
-&gt; "\033[{format_attibute};{foreground_color};{background_color}m {TEXT} \033[{reset_format_attribute} m" 
*/</span>

<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="nf">RainbowText</span>  <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">);</span>
<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="nf">RainbowText</span>  <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">);</span>
<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="nf">RainbowText</span>  <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">);</span>

<span class="cp">#endif  // RAINBOWCOLORS_H
</span></pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="rainbowcolorscpp">RAINBOWCOLORS.cpp</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;string&gt;
</span>  <span class="cp">#include &lt;map&gt;
</span>  <span class="cp">#include "RAINBOWCOLORS.h"
</span>  
  <span class="n">std</span><span class="o">::</span><span class="n">map</span> <span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">mapForegroundColor</span><span class="o">=</span> 
  <span class="p">{</span>
    <span class="p">{</span> <span class="s">"Red"</span><span class="p">,</span> <span class="s">"38;5;160"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Orange"</span><span class="p">,</span> <span class="s">"38;5;202"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Yellow"</span><span class="p">,</span> <span class="s">"38;5;11"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Green"</span><span class="p">,</span> <span class="s">"38;5;76"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Blue"</span><span class="p">,</span> <span class="s">"38;5;20"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Indigo"</span><span class="p">,</span> <span class="s">"38;5;18"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Violet"</span><span class="p">,</span> <span class="s">"38;5;128"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Pink"</span><span class="p">,</span> <span class="s">"38;5;161"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Black"</span><span class="p">,</span> <span class="s">"38;5;0"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Gray"</span><span class="p">,</span> <span class="s">"38;5;246"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"White"</span><span class="p">,</span> <span class="s">"38;5;15"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Olive Green"</span><span class="p">,</span> <span class="s">"38;5;64"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Light Green"</span><span class="p">,</span> <span class="s">"38;5;107"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Light Blue"</span><span class="p">,</span> <span class="s">"38;5;123"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Light Red"</span><span class="p">,</span> <span class="s">"38;5;196"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Sky Blue"</span><span class="p">,</span> <span class="s">"38;5;75"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Default"</span><span class="p">,</span> <span class="s">"39"</span> <span class="p">}</span>
  <span class="p">};</span>
  
  <span class="n">std</span><span class="o">::</span><span class="n">map</span> <span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">mapBackgroundColor</span> <span class="o">=</span> 
  <span class="p">{</span>
    <span class="p">{</span> <span class="s">"Red"</span><span class="p">,</span> <span class="s">"48;5;160"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Orange"</span><span class="p">,</span> <span class="s">"48;5;202"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Yellow"</span><span class="p">,</span> <span class="s">"48;5;11"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Green"</span><span class="p">,</span> <span class="s">"48;5;76"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Blue"</span><span class="p">,</span> <span class="s">"48;5;20"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Indigo"</span><span class="p">,</span> <span class="s">"48;5;18"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Violet"</span><span class="p">,</span> <span class="s">"48;5;128"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Pink"</span><span class="p">,</span> <span class="s">"48;5;161"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Black"</span><span class="p">,</span> <span class="s">"48;5;0"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Gray"</span><span class="p">,</span> <span class="s">"48;5;246"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"White"</span><span class="p">,</span> <span class="s">"48;5;15"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Olive Green"</span><span class="p">,</span> <span class="s">"48;5;64"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Light Green"</span><span class="p">,</span> <span class="s">"48;5;107"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Light Blue"</span><span class="p">,</span> <span class="s">"48;5;123"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Light Red"</span><span class="p">,</span> <span class="s">"48;5;196"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Sky Blue"</span><span class="p">,</span> <span class="s">"48;5;75"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Default"</span><span class="p">,</span> <span class="s">"49"</span> <span class="p">}</span>
  <span class="p">};</span>
  
  <span class="n">std</span><span class="o">::</span><span class="n">map</span> <span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">mapSetFormat</span> <span class="o">=</span>
  <span class="p">{</span>
    <span class="p">{</span> <span class="s">"Default"</span><span class="p">,</span> <span class="s">"0"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Bold"</span><span class="p">,</span> <span class="s">"1"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Underlined"</span><span class="p">,</span> <span class="s">"4"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Blink"</span><span class="p">,</span> <span class="s">"5"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Reverse"</span><span class="p">,</span> <span class="s">"7"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"Hidden"</span><span class="p">,</span> <span class="s">"8"</span> <span class="p">}</span>
  <span class="p">};</span>
  
  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="nf">RainbowText</span> <span class="p">(</span>   <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">src</span><span class="p">,</span>
                              <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">foregroundColor</span> <span class="o">=</span> <span class="s">"Default"</span>
                          <span class="p">)</span>
  <span class="p">{</span>
    <span class="k">auto</span> <span class="n">pairFound</span> <span class="o">=</span> <span class="n">mapForegroundColor</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">foregroundColor</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">pairFound</span> <span class="o">!=</span> <span class="n">mapForegroundColor</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
        <span class="n">foregroundColor</span> <span class="o">=</span> <span class="n">pairFound</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">;</span>
    <span class="k">else</span>
        <span class="n">foregroundColor</span> <span class="o">=</span> <span class="s">"Default"</span><span class="p">;</span>
  
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">backgroundColor</span> <span class="o">=</span> <span class="s">"Default"</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">format</span> <span class="o">=</span> <span class="s">"Default"</span><span class="p">;</span>
  
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="k">const</span> <span class="n">escCode</span> <span class="o">=</span> <span class="s">"</span><span class="se">\033</span><span class="s">"</span><span class="p">;</span>
    
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">formattedText</span> <span class="o">=</span> <span class="n">escCode</span>  <span class="o">+</span> <span class="s">"["</span> <span class="o">+</span>
                  <span class="n">mapSetFormat</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">format</span><span class="p">)</span> <span class="o">+</span> <span class="s">";"</span> <span class="o">+</span>
                  <span class="n">mapForegroundColor</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">foregroundColor</span><span class="p">)</span> <span class="o">+</span> <span class="s">";"</span> <span class="o">+</span>
                  <span class="n">mapBackgroundColor</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">backgroundColor</span><span class="p">)</span> <span class="o">+</span> <span class="s">"m"</span> <span class="o">+</span>
                  <span class="n">src</span> <span class="o">+</span> <span class="n">escCode</span> <span class="o">+</span> <span class="s">"[0m"</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">formattedText</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="nf">RainbowText</span> <span class="p">(</span>   <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">src</span><span class="p">,</span>
                              <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">foregroundColor</span> <span class="o">=</span> <span class="s">"Default"</span><span class="p">,</span>
                              <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">backgroundColor</span> <span class="o">=</span> <span class="s">"Default"</span>
                          <span class="p">)</span>
  <span class="p">{</span>
    <span class="k">auto</span> <span class="n">pairFound</span> <span class="o">=</span> <span class="n">mapForegroundColor</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">foregroundColor</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">pairFound</span> <span class="o">!=</span> <span class="n">mapForegroundColor</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
        <span class="n">foregroundColor</span> <span class="o">=</span> <span class="n">pairFound</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">;</span>
    <span class="k">else</span>
        <span class="n">foregroundColor</span> <span class="o">=</span> <span class="s">"Default"</span><span class="p">;</span>
  
    <span class="n">pairFound</span> <span class="o">=</span> <span class="n">mapBackgroundColor</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">backgroundColor</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">pairFound</span> <span class="o">!=</span> <span class="n">mapBackgroundColor</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
        <span class="n">backgroundColor</span> <span class="o">=</span> <span class="n">pairFound</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">;</span>
    <span class="k">else</span>
        <span class="n">backgroundColor</span> <span class="o">=</span> <span class="s">"Default"</span><span class="p">;</span>
        
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">format</span> <span class="o">=</span> <span class="s">"Default"</span><span class="p">;</span>
  
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="k">const</span> <span class="n">escCode</span> <span class="o">=</span> <span class="s">"</span><span class="se">\033</span><span class="s">"</span><span class="p">;</span>
    
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">formattedText</span> <span class="o">=</span> <span class="n">escCode</span>  <span class="o">+</span> <span class="s">"["</span> <span class="o">+</span>
                  <span class="n">mapSetFormat</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">format</span><span class="p">)</span> <span class="o">+</span> <span class="s">";"</span> <span class="o">+</span>
                  <span class="n">mapForegroundColor</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">foregroundColor</span><span class="p">)</span> <span class="o">+</span> <span class="s">";"</span> <span class="o">+</span>
                  <span class="n">mapBackgroundColor</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">backgroundColor</span><span class="p">)</span> <span class="o">+</span> <span class="s">"m"</span> <span class="o">+</span>
                  <span class="n">src</span> <span class="o">+</span> <span class="n">escCode</span> <span class="o">+</span> <span class="s">"[0m"</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">formattedText</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="nf">RainbowText</span> <span class="p">(</span>   <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">src</span><span class="p">,</span>
                              <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">foregroundColor</span> <span class="o">=</span> <span class="s">"Default"</span><span class="p">,</span>
                              <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">backgroundColor</span> <span class="o">=</span> <span class="s">"Default"</span><span class="p">,</span>
                              <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">format</span> <span class="o">=</span> <span class="s">"Default"</span>
                          <span class="p">)</span>
  <span class="p">{</span>
    <span class="k">auto</span> <span class="n">pairFound</span> <span class="o">=</span> <span class="n">mapForegroundColor</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">foregroundColor</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">pairFound</span> <span class="o">!=</span> <span class="n">mapForegroundColor</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
        <span class="n">foregroundColor</span> <span class="o">=</span> <span class="n">pairFound</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">;</span>
    <span class="k">else</span>
        <span class="n">foregroundColor</span> <span class="o">=</span> <span class="s">"Default"</span><span class="p">;</span>
  
    <span class="n">pairFound</span> <span class="o">=</span> <span class="n">mapBackgroundColor</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">backgroundColor</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">pairFound</span> <span class="o">!=</span> <span class="n">mapBackgroundColor</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
        <span class="n">backgroundColor</span> <span class="o">=</span> <span class="n">pairFound</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">;</span>
    <span class="k">else</span>
        <span class="n">backgroundColor</span> <span class="o">=</span> <span class="s">"Default"</span><span class="p">;</span>
  
    <span class="n">pairFound</span> <span class="o">=</span> <span class="n">mapSetFormat</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">format</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">pairFound</span> <span class="o">!=</span> <span class="n">mapSetFormat</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
        <span class="n">format</span> <span class="o">=</span> <span class="n">pairFound</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">;</span>
    <span class="k">else</span>
        <span class="n">format</span> <span class="o">=</span> <span class="s">"Default"</span><span class="p">;</span>
  
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="k">const</span> <span class="n">escCode</span> <span class="o">=</span> <span class="s">"</span><span class="se">\033</span><span class="s">"</span><span class="p">;</span>
    
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">formattedText</span> <span class="o">=</span> <span class="n">escCode</span>  <span class="o">+</span> <span class="s">"["</span> <span class="o">+</span>
                  <span class="n">mapSetFormat</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">format</span><span class="p">)</span> <span class="o">+</span> <span class="s">";"</span> <span class="o">+</span>
                  <span class="n">mapForegroundColor</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">foregroundColor</span><span class="p">)</span> <span class="o">+</span> <span class="s">";"</span> <span class="o">+</span>
                  <span class="n">mapBackgroundColor</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">backgroundColor</span><span class="p">)</span> <span class="o">+</span> <span class="s">"m"</span> <span class="o">+</span>
                  <span class="n">src</span> <span class="o">+</span> <span class="n">escCode</span> <span class="o">+</span> <span class="s">"[0m"</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">formattedText</span><span class="p">;</span>
  <span class="p">}</span>
  
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="blackpin_idh">BLACKPIN_ID.h</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="cp">#ifndef BLACKPIN_ID_H
#define BLACKPIN_ID_H
</span>
<span class="cm">/* The gpio number of the pin*/</span>
<span class="k">enum</span> <span class="n">GPIO_ID</span> <span class="p">{</span>
  <span class="n">P8_08</span> <span class="o">=</span> <span class="mi">67</span><span class="p">,</span>
  <span class="n">P8_10</span> <span class="o">=</span> <span class="mi">68</span><span class="p">,</span>
  <span class="n">P8_11</span> <span class="o">=</span> <span class="mi">45</span><span class="p">,</span>
  <span class="n">P8_12</span> <span class="o">=</span> <span class="mi">44</span><span class="p">,</span>
  <span class="n">P8_14</span> <span class="o">=</span> <span class="mi">26</span><span class="p">,</span>
  <span class="n">P8_16</span> <span class="o">=</span> <span class="mi">46</span><span class="p">,</span>
  <span class="n">P8_17</span> <span class="o">=</span> <span class="mi">27</span><span class="p">,</span>
  <span class="n">P8_18</span> <span class="o">=</span> <span class="mi">65</span><span class="p">,</span>
  <span class="n">P8_20</span> <span class="o">=</span> <span class="mi">63</span><span class="p">,</span>
  <span class="n">P8_26</span> <span class="o">=</span> <span class="mi">61</span><span class="p">,</span>
<span class="p">};</span>

<span class="cp">#endif // BLACKPIN_ID_H
</span></pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="gpioh">GPIO.h</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
</pre></td><td class="rouge-code"><pre><span class="cp">#ifndef GPIO_H
#define GPIO_H
</span>
<span class="cp">#include &lt;string&gt;
#include &lt;map&gt;
</span>
<span class="cp">#include "RAINBOWCOLORS.h"
#include "BLACKPIN_ID.h"
#include "SYSFILEACCESS.h"
</span>
<span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="nf">GPIO_PATH</span><span class="p">(</span><span class="s">"/sys/class/gpio/"</span><span class="p">);</span>

<span class="cm">/* The numeric mode for MODE: e.g. 0/1 for OUTPUT/INPUT */</span>
<span class="k">enum</span> <span class="n">MODE</span> <span class="p">{</span>
  <span class="n">OUTPUT</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
  <span class="n">INPUT</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
<span class="p">};</span>

<span class="cm">/* The numeric value for VALUE: e.g. 0/1 for LOW/HIGH */</span>
<span class="k">enum</span> <span class="n">VALUE</span> <span class="p">{</span>
  <span class="n">LOW</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
  <span class="n">HIGH</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
<span class="p">};</span>

<span class="cm">/* The numeric value for EDGE: e.g. 0/1/2 for RISING/FALLING/BOTH */</span>
<span class="k">enum</span> <span class="n">EDGE</span> <span class="p">{</span>
  <span class="n">RISING</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
  <span class="n">FALLING</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
  <span class="n">BOTH</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">GPIO</span> <span class="o">:</span> <span class="k">public</span> <span class="n">SYSFILEACCESS</span>
<span class="p">{</span>
  <span class="nl">protected:</span>
    <span class="n">GPIO_ID</span> <span class="n">id</span><span class="p">;</span>         <span class="cm">/* Enum for the Kernel GPIO number of the object */</span>
    <span class="n">MODE</span> <span class="n">mode</span><span class="p">;</span>          <span class="cm">/* The GPIO mode e.g. 0/1 for OUTPUT/INPUT */</span>
    <span class="kt">int</span> <span class="n">value</span><span class="p">;</span>          <span class="cm">/* The GPIO value e.g. 0/1 for LOW/HIGH */</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">;</span>   <span class="cm">/* The name of the GPIO e.g. gpio44 */</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">path</span><span class="p">;</span>   <span class="cm">/* The full path to the GPIO e.g. /sys/class/gpio/gpio44 */</span>
    
    <span class="cm">/* Map to store the BeagleBone Black pin`s kernel number with its header name */</span>
    <span class="n">std</span><span class="o">::</span><span class="n">map</span> <span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">blackPinIdMap</span><span class="p">;</span> 

  <span class="nl">public:</span>
    <span class="c1">// Default constructor</span>
    <span class="n">GPIO</span> <span class="p">();</span>

    <span class="c1">// Overload constructor with the pin`s name</span>
    <span class="n">GPIO</span> <span class="p">(</span><span class="n">GPIO_ID</span><span class="p">);</span>

    <span class="c1">// Overload constructor with the pin id and mode</span>
    <span class="n">GPIO</span> <span class="p">(</span><span class="n">GPIO_ID</span><span class="p">,</span> <span class="n">MODE</span><span class="p">);</span>

    <span class="c1">// Initialize the GPIO pin with the data provided by the constructor</span>
    <span class="kt">void</span> <span class="n">InitGPIOPin</span><span class="p">();</span>

    <span class="c1">// Initialize the GPIO pin id map kernel's number -&gt; header's name</span>
    <span class="kt">void</span> <span class="n">InitPinIdMap</span><span class="p">();</span> 

    <span class="c1">// Accessor method to get the kernel pin's number</span>
    <span class="kt">int</span> <span class="n">GetPinKernelId</span><span class="p">();</span>

    <span class="c1">// Accessor method to get the header pin's name</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">GetPinHeaderId</span><span class="p">();</span>

    <span class="c1">// Mutator method to set the pin's mode</span>
    <span class="kt">int</span> <span class="n">SetMode</span><span class="p">(</span><span class="n">MODE</span><span class="p">);</span>

    <span class="c1">// Method to export the GPIO pin</span>
    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">ExportGPIO</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>

    <span class="c1">// Method to unexport the GPIO pin</span>
    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">UnexportGPIO</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>

    <span class="c1">// Interface method to set the GPIO pin state</span>
    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">DigitalWrite</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>

    <span class="c1">// Overload Interface method to set the GPIO pin state adn printing the value</span>
    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">DigitalWrite</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">bool</span><span class="p">);</span>

    <span class="c1">// Interface method to get the GPIO pin state</span>
    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">DigitalRead</span><span class="p">();</span>

    <span class="c1">// Delay method in microseconds</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">Delayus</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>

    <span class="c1">// Delay method in milliseconds</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">Delayms</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>

    <span class="c1">// Destructor</span>
    <span class="k">virtual</span> <span class="o">~</span><span class="n">GPIO</span> <span class="p">();</span>    
<span class="p">};</span>

<span class="cp">#endif // GPIO_H
</span></pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="gpiocpp">GPIO.cpp</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;iostream&gt;
#include "../../Sources/ADC.h"
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">string</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"Main program starting here..."</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span><span class="s">"Blue"</span><span class="p">,</span> <span class="s">"White"</span><span class="p">,</span> <span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
  
  <span class="n">message</span> <span class="o">=</span> <span class="s">"Setting ADC mode on a pin"</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Blue"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
  <span class="n">ADC</span> <span class="n">adcPin</span><span class="p">(</span><span class="n">P9_39</span><span class="p">);</span>

  <span class="n">message</span> <span class="o">=</span> <span class="s">"Read continuously the voltage on pin"</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Blue"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

  <span class="kt">float</span> <span class="n">adcVoltageOut</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">sampleTime</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
  <span class="n">adcPin</span><span class="p">.</span><span class="n">ReadVoltageContinuosSampling</span><span class="p">(</span><span class="n">adcVoltageOut</span><span class="p">,</span><span class="n">sampleTime</span><span class="p">);</span>
  
  <span class="kt">char</span> <span class="n">userInput</span> <span class="o">=</span> <span class="sc">'\0'</span><span class="p">;</span>
  <span class="k">while</span> <span class="p">(</span><span class="n">userInput</span> <span class="o">!=</span> <span class="sc">'y'</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">message</span> <span class="o">=</span> <span class="s">"Do you want to stop the readings on the pin? Enter 'y' for yes:"</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Blue"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">userInput</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">userInput</span> <span class="o">==</span> <span class="sc">'y'</span><span class="p">)</span> 
    <span class="p">{</span>
      <span class="n">adcPin</span><span class="p">.</span><span class="n">StopReadVoltageContinuosSampling</span><span class="p">();</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="n">message</span> <span class="o">=</span> <span class="s">"Main program finishes here..."</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span><span class="s">"Blue"</span><span class="p">,</span> <span class="s">"White"</span><span class="p">,</span><span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="ledh">LED.h</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
</pre></td><td class="rouge-code"><pre><span class="cp">#ifndef LED_H
#define LED_H
</span>
<span class="cp">#include &lt;thread&gt;
#include &lt;vector&gt;
#include "GPIO.h"
</span>
<span class="k">class</span> <span class="nc">LED</span><span class="o">:</span> <span class="k">public</span> <span class="n">GPIO</span> 
<span class="p">{</span>
  <span class="nl">private:</span>
    <span class="kt">bool</span> <span class="n">stopBlinkFlag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="n">stopFlashFlag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="n">stopHeartBeatFlag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
    
    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">blinkThread</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">flashThread</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">heartBeatThread</span><span class="p">;</span>
    
    <span class="kt">void</span> <span class="n">MakeBlink</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span> 
    <span class="kt">void</span> <span class="n">MakeFlash</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
    <span class="kt">void</span> <span class="n">MakeHeartBeat</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>

  <span class="nl">public:</span>
    <span class="c1">// Overload constructor</span>
    <span class="n">LED</span> <span class="p">(</span><span class="n">GPIO_ID</span><span class="p">);</span>

    <span class="c1">// Method to turn on the Led</span>
    <span class="kt">void</span> <span class="n">TurnOn</span><span class="p">();</span>

    <span class="c1">// Method to turn off the Led</span>
    <span class="kt">void</span> <span class="n">TurnOff</span><span class="p">();</span>

    <span class="c1">// Method to toggle Led</span>
    <span class="kt">void</span> <span class="n">Toggle</span><span class="p">();</span>

    <span class="c1">// Method for doing a blinking pattern</span>
    <span class="kt">void</span> <span class="n">Blink</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>

    <span class="c1">// Method for doing a flashing pattern</span>
    <span class="kt">void</span> <span class="n">Flash</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>

    <span class="c1">// Method for doing a digital heart beat pattern</span>
    <span class="kt">void</span> <span class="n">HeartBeat</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>

    <span class="c1">// Method for stopping a blinking</span>
    <span class="kt">void</span> <span class="n">StopBlink</span><span class="p">();</span>

    <span class="c1">// Method for stopping a flashing</span>
    <span class="kt">void</span> <span class="n">StopFlash</span><span class="p">();</span>
    
    <span class="c1">// Method for stopping a digital heart beat</span>
    <span class="kt">void</span> <span class="n">StopHeartBeat</span><span class="p">();</span>
    
    <span class="c1">// Destructor</span>
    <span class="o">~</span><span class="n">LED</span><span class="p">();</span>
<span class="p">};</span>

<span class="cp">#endif // LED_H
</span></pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="ledcpp">LED.cpp</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;iostream&gt;
</span>  <span class="cp">#include &lt;chrono&gt;
</span>  <span class="cp">#include &lt;thread&gt;
</span>  
  <span class="cp">#include "LED.h"
</span>  
  <span class="c1">// Overload constructor</span>
  <span class="n">LED</span><span class="o">::</span><span class="n">LED</span><span class="p">(</span><span class="n">GPIO_ID</span> <span class="n">newId</span><span class="p">)</span> <span class="o">:</span> <span class="n">GPIO</span><span class="p">(</span><span class="n">newId</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">)</span> 
  <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span>  <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="s">"Led object was created on pin: "</span><span class="p">,</span> <span class="s">"Light Blue"</span><span class="p">)</span> 
          <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">GetPinHeaderId</span><span class="p">(),</span> <span class="s">"Light Blue"</span><span class="p">,</span> <span class="s">"Default"</span><span class="p">,</span> <span class="s">"Bold"</span><span class="p">)</span> 
          <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="cm">/*
    Public method to turn on the Led attached to the pin 
  */</span>
  <span class="kt">void</span> <span class="n">LED</span><span class="o">::</span><span class="n">TurnOn</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="k">this</span><span class="o">-&gt;</span><span class="n">DigitalWrite</span><span class="p">(</span><span class="n">HIGH</span><span class="p">);</span>
  <span class="p">}</span>
  
  <span class="cm">/*
    Public method to turn on the Led attached to the pin 
  */</span>
  <span class="kt">void</span> <span class="n">LED</span><span class="o">::</span><span class="n">TurnOff</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="k">this</span><span class="o">-&gt;</span><span class="n">DigitalWrite</span><span class="p">(</span><span class="n">LOW</span><span class="p">);</span>
  <span class="p">}</span>
  
  <span class="cm">/*
    Public method to toggle the Led attached to the pin 
  */</span>
  <span class="kt">void</span> <span class="n">LED</span><span class="o">::</span><span class="n">Toggle</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">DigitalRead</span><span class="p">()</span> <span class="o">==</span> <span class="n">LOW</span><span class="p">)</span>
      <span class="k">this</span><span class="o">-&gt;</span><span class="n">DigitalWrite</span><span class="p">(</span><span class="n">HIGH</span><span class="p">);</span>
    <span class="k">else</span>
      <span class="k">this</span><span class="o">-&gt;</span><span class="n">DigitalWrite</span><span class="p">(</span><span class="n">LOW</span><span class="p">);</span>
  <span class="p">}</span>
  
  <span class="cm">/*
    Public method to make a blink on the pin 
    @param int: The desired duration in milliseconds
  */</span>
  <span class="kt">void</span> <span class="n">LED</span><span class="o">::</span><span class="n">Blink</span><span class="p">(</span><span class="kt">int</span> <span class="n">duration</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">message</span>
    <span class="p">{</span>
      <span class="s">"Blinking has been activated with duration of: "</span>
      <span class="o">+</span> <span class="n">std</span><span class="o">::</span><span class="n">to_string</span><span class="p">(</span><span class="n">duration</span><span class="p">)</span> <span class="o">+</span> <span class="s">"ms on pin: "</span> <span class="o">+</span> <span class="n">std</span><span class="o">::</span><span class="n">to_string</span><span class="p">(</span><span class="n">id</span><span class="p">)</span>
    <span class="p">};</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Light Blue"</span><span class="p">,</span> <span class="s">"Default"</span><span class="p">,</span> <span class="s">"Bold"</span><span class="p">)</span> 
              <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span> 
    <span class="n">blinkThread</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="p">(</span><span class="o">&amp;</span><span class="n">LED</span><span class="o">::</span><span class="n">MakeBlink</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span> <span class="n">duration</span><span class="p">);</span>
  <span class="p">}</span>
  
  <span class="cm">/*
    Private method that contains the routine to blink 
    @param int: The desired duration in milliseconds
  */</span>
  <span class="kt">void</span> <span class="n">LED</span><span class="o">::</span><span class="n">MakeBlink</span><span class="p">(</span><span class="kt">int</span> <span class="n">duration</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">stopBlinkFlag</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="k">this</span><span class="o">-&gt;</span><span class="n">DigitalWrite</span><span class="p">(</span><span class="n">HIGH</span><span class="p">);</span>
      <span class="k">this</span><span class="o">-&gt;</span><span class="n">Delayms</span><span class="p">(</span><span class="n">duration</span><span class="p">);</span>
      <span class="k">this</span><span class="o">-&gt;</span><span class="n">DigitalWrite</span><span class="p">(</span><span class="n">LOW</span><span class="p">);</span>
      <span class="k">this</span><span class="o">-&gt;</span><span class="n">Delayms</span><span class="p">(</span><span class="n">duration</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="cm">/*
    Public method to stop the blinking on the pin 
  */</span>
  <span class="kt">void</span> <span class="n">LED</span><span class="o">::</span><span class="n">StopBlink</span> <span class="p">()</span>
  <span class="p">{</span>
    <span class="k">this</span><span class="o">-&gt;</span><span class="n">stopBlinkFlag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="cm">/*
    Public method to make a flash on the pin 
    @param int: The desired time ON in milliseconds
    @param int: The desired time OFF in milliseconds
  */</span>
  <span class="kt">void</span> <span class="n">LED</span><span class="o">::</span><span class="n">Flash</span><span class="p">(</span><span class="kt">int</span> <span class="n">timeOn</span><span class="p">,</span> <span class="kt">int</span> <span class="n">timeOff</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">message</span> 
    <span class="p">{</span>
      <span class="s">"Flashing has been activated time on: "</span>
      <span class="o">+</span> <span class="n">std</span><span class="o">::</span><span class="n">to_string</span><span class="p">(</span><span class="n">timeOn</span><span class="p">)</span> <span class="o">+</span> <span class="s">"ms and time off: "</span> 
      <span class="o">+</span> <span class="n">std</span><span class="o">::</span><span class="n">to_string</span><span class="p">(</span><span class="n">timeOff</span><span class="p">)</span> <span class="o">+</span> <span class="s">"ms on pin: "</span> <span class="o">+</span> <span class="n">std</span><span class="o">::</span><span class="n">to_string</span><span class="p">(</span><span class="n">id</span><span class="p">)</span>
    <span class="p">};</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Light Blue"</span><span class="p">,</span> <span class="s">"Default"</span><span class="p">,</span> <span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="n">flashThread</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="p">(</span><span class="o">&amp;</span><span class="n">LED</span><span class="o">::</span><span class="n">MakeFlash</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span> <span class="n">timeOn</span><span class="p">,</span> <span class="n">timeOff</span><span class="p">);</span>
  <span class="p">}</span>
  
  <span class="cm">/*
    Private method that contains the routine to flash
    @param int: The desired time ON in milliseconds
    @param int: The desired time OFF in milliseconds
  */</span>
  <span class="kt">void</span> <span class="n">LED</span><span class="o">::</span><span class="n">MakeFlash</span><span class="p">(</span><span class="kt">int</span> <span class="n">timeOn</span><span class="p">,</span> <span class="kt">int</span> <span class="n">timeOff</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">stopFlashFlag</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="k">this</span><span class="o">-&gt;</span><span class="n">DigitalWrite</span><span class="p">(</span><span class="n">HIGH</span><span class="p">);</span>
      <span class="k">this</span><span class="o">-&gt;</span><span class="n">Delayms</span><span class="p">(</span><span class="n">timeOn</span><span class="p">);</span>
      <span class="k">this</span><span class="o">-&gt;</span><span class="n">DigitalWrite</span><span class="p">(</span><span class="n">LOW</span><span class="p">);</span>
      <span class="k">this</span><span class="o">-&gt;</span><span class="n">Delayms</span><span class="p">(</span><span class="n">timeOff</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="cm">/*
    Public method to stop the flash on the pin 
  */</span>
  <span class="kt">void</span> <span class="n">LED</span><span class="o">::</span><span class="n">StopFlash</span> <span class="p">()</span>
  <span class="p">{</span>
    <span class="k">this</span><span class="o">-&gt;</span><span class="n">stopFlashFlag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="cm">/*
    Public method to make a digital heart beat on the pin 
    @param int: The desired time On of the pulse in milliseconds
    @param int: The desired ratio between the pulses and the pause in the pattern
  */</span>
  <span class="kt">void</span> <span class="n">LED</span><span class="o">::</span><span class="n">HeartBeat</span><span class="p">(</span><span class="kt">int</span> <span class="n">timeOn</span><span class="p">,</span> <span class="kt">int</span> <span class="n">ratio</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">message</span> 
    <span class="p">{</span>
      <span class="s">"Heart beat has been activated with a time ON of: "</span>
      <span class="o">+</span> <span class="n">std</span><span class="o">::</span><span class="n">to_string</span><span class="p">(</span><span class="n">timeOn</span><span class="p">)</span> <span class="o">+</span> <span class="s">"ms on pin: "</span> <span class="o">+</span> <span class="n">std</span><span class="o">::</span><span class="n">to_string</span><span class="p">(</span><span class="n">id</span><span class="p">)</span>
      <span class="o">+</span> <span class="s">" with a ratio pulse/pause of: "</span> <span class="o">+</span> <span class="n">std</span><span class="o">::</span><span class="n">to_string</span><span class="p">(</span><span class="n">ratio</span><span class="p">)</span>
    <span class="p">};</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Light Blue"</span><span class="p">,</span> <span class="s">"Default"</span><span class="p">,</span> <span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="n">heartBeatThread</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="p">(</span><span class="o">&amp;</span><span class="n">LED</span><span class="o">::</span><span class="n">MakeHeartBeat</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span> <span class="n">timeOn</span><span class="p">,</span> <span class="n">ratio</span><span class="p">);</span>
  <span class="p">}</span>
  
  <span class="cm">/*
     Private method that contains the routine to do the digital heart beat 
     @param int: The desired time On of the pulse in milliseconds
     @param int: The desired ratio between the pulses and the pause in the pattern
  */</span>
  <span class="kt">void</span> <span class="n">LED</span><span class="o">::</span><span class="n">MakeHeartBeat</span><span class="p">(</span><span class="kt">int</span> <span class="n">timeOn</span><span class="p">,</span> <span class="kt">int</span> <span class="n">ratio</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">stopHeartBeatFlag</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
      <span class="p">{</span>
        <span class="k">this</span><span class="o">-&gt;</span><span class="n">DigitalWrite</span><span class="p">(</span><span class="n">HIGH</span><span class="p">);</span>
        <span class="k">this</span><span class="o">-&gt;</span><span class="n">Delayms</span><span class="p">(</span><span class="n">timeOn</span><span class="p">);</span>
        <span class="k">this</span><span class="o">-&gt;</span><span class="n">DigitalWrite</span><span class="p">(</span><span class="n">LOW</span><span class="p">);</span>
        <span class="k">this</span><span class="o">-&gt;</span><span class="n">Delayms</span><span class="p">(</span><span class="n">timeOn</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="k">this</span><span class="o">-&gt;</span><span class="n">Delayms</span><span class="p">(</span><span class="n">timeOn</span><span class="o">*</span><span class="n">ratio</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="cm">/*
    Public method to stop the digital heart beat on the pin 
  */</span>
  <span class="kt">void</span> <span class="n">LED</span><span class="o">::</span><span class="n">StopHeartBeat</span> <span class="p">()</span>
  <span class="p">{</span>
    <span class="k">this</span><span class="o">-&gt;</span><span class="n">stopHeartBeatFlag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="c1">// Destructor</span>
  <span class="n">LED</span><span class="o">::~</span><span class="n">LED</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">DigitalRead</span><span class="p">()</span> <span class="o">==</span> <span class="n">HIGH</span><span class="p">)</span>
      <span class="k">this</span><span class="o">-&gt;</span><span class="n">DigitalWrite</span><span class="p">(</span><span class="n">LOW</span><span class="p">);</span>
  
    <span class="k">if</span> <span class="p">(</span><span class="n">blinkThread</span><span class="p">.</span><span class="n">joinable</span><span class="p">())</span>
      <span class="n">blinkThread</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">flashThread</span><span class="p">.</span><span class="n">joinable</span><span class="p">())</span>
      <span class="n">flashThread</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">heartBeatThread</span><span class="p">.</span><span class="n">joinable</span><span class="p">())</span>
      <span class="n">heartBeatThread</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>
  <span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="pwmh">PWM.h</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
</pre></td><td class="rouge-code"><pre><span class="cp">#ifndef PWM_H
#define PWM_H
</span>
<span class="cp">#include &lt;string&gt;
#include &lt;thread&gt;
</span>
<span class="cp">#include "RAINBOWCOLORS.h"
#include "SYSFILEACCESS.h"
</span>
<span class="cm">/* 
  Declare a type for a function pointer
  It is the construct for: using function_type = int (*) ()
    function_type:  the function name
    int: return type  
    (*): the dereference operator due to the address of the function name
    (): the arguments of the function, in this case: void
  Stores the address of a function 
*/</span>
<span class="k">using</span> <span class="n">callbackType</span> <span class="o">=</span> <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="p">)();</span>

<span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="nf">PWM_PATH</span> <span class="p">(</span><span class="s">"/sys/devices/platform/ocp/"</span><span class="p">);</span>
<span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">EHRPWM0_PATH</span> <span class="o">=</span> <span class="s">"48300000.epwmss/48300200.pwm/pwm/"</span><span class="p">;</span>
<span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">EHRPWM1_PATH</span> <span class="o">=</span> <span class="s">"48302000.epwmss/48302200.pwm/pwm/"</span><span class="p">;</span>
<span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">EHRPWM2_PATH</span> <span class="o">=</span> <span class="s">"48304000.epwmss/48304200.pwm/pwm/"</span><span class="p">;</span>

<span class="cm">/* The pwm internal class number of the pin*/</span>
<span class="k">enum</span> <span class="n">PWM_ID</span> <span class="p">{</span>
  <span class="n">P8_13</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
  <span class="n">P8_19</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
  <span class="n">P9_14</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span>
  <span class="n">P9_16</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span>
  <span class="n">P9_21</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span>
  <span class="n">P9_22</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> 
<span class="p">};</span>

<span class="k">class</span> <span class="nc">PWM</span> <span class="o">:</span> <span class="k">public</span> <span class="n">SYSFILEACCESS</span>
<span class="p">{</span>
  <span class="nl">private:</span>
    <span class="kt">int</span> <span class="n">id</span><span class="p">;</span> <span class="cm">/* The PWM number of the object */</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">idMap</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">;</span>   <span class="cm">/* The name of the PWM e.g. pwm-6:1 */</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">path</span><span class="p">;</span>   <span class="cm">/* The full path to the PWM e.g. /sys/class/pwm/pwm-6:1 */</span>
    <span class="kt">int</span> <span class="n">period</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">dutyCycle</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">enable</span><span class="p">;</span>
    
    <span class="c1">// Helper method to enable the pwm on the pin</span>
    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">Enable</span><span class="p">();</span>

    <span class="c1">// Helper method to enable the pwm on the pin</span>
    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">Disable</span><span class="p">();</span>

  <span class="nl">public:</span>
    <span class="c1">// Default constructor</span>
    <span class="n">PWM</span><span class="p">();</span>

    <span class="c1">// Overload constructor with pin's id</span>
    <span class="n">PWM</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>

    <span class="c1">// Overload constructor with the pin id and period</span>
    <span class="n">PWM</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>

    <span class="c1">// Initialize the PWM pin with the data provided by the constructor</span>
    <span class="kt">void</span> <span class="n">InitPWMPin</span><span class="p">();</span>

    <span class="c1">// Interface method to get the period</span>
    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">GetPeriod</span><span class="p">();</span>

    <span class="c1">// Interface method to get the duty cycle</span>
    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">GetDutyCycle</span><span class="p">();</span>

    <span class="c1">// Interface method to set the period</span>
    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">SetPeriod</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>

    <span class="c1">// Interface method to set the duty cycle</span>
    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">SetDutyCycle</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
    
    <span class="c1">// Delay method in milliseconds</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">Delayms</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>

    <span class="c1">// Method to do execute an user function</span>
    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">DoUserFunction</span><span class="p">(</span><span class="n">callbackType</span><span class="p">);</span>

    <span class="c1">// Destructor</span>
    <span class="k">virtual</span> <span class="o">~</span><span class="n">PWM</span><span class="p">();</span>

<span class="p">};</span>
<span class="cp">#endif // PWM_H
</span></pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="pwmcpp">PWM.cpp</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;iostream&gt;
</span>  <span class="cp">#include &lt;fstream&gt;
</span>  <span class="cp">#include &lt;string&gt;
</span>  <span class="cp">#include &lt;chrono&gt; // chrono::milliseconds()
</span>  <span class="cp">#include &lt;thread&gt; // this_thread::sleep_for()
</span>  <span class="cp">#include &lt;exception&gt;
</span>  <span class="cp">#include &lt;mutex&gt;
</span>  <span class="cp">#include &lt;cstdlib&gt;  // system()
</span>  
  <span class="cp">#include "PWM.h"
</span>  
  <span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
  
  <span class="k">class</span> <span class="nc">PWM_Exception</span> <span class="o">:</span> <span class="k">public</span> <span class="n">exception</span> 
  <span class="p">{</span>
    <span class="nl">private:</span>
      <span class="n">string</span> <span class="n">reason</span><span class="p">;</span>
    <span class="nl">public:</span>
      <span class="n">PWM_Exception</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">why</span><span class="p">)</span> <span class="o">:</span> <span class="n">reason</span> <span class="p">(</span><span class="n">why</span><span class="p">)</span> <span class="p">{};</span>
      <span class="k">virtual</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">what</span><span class="p">()</span> 
      <span class="p">{</span>
        <span class="k">return</span> <span class="n">reason</span><span class="p">.</span><span class="n">c_str</span><span class="p">();</span>
      <span class="p">}</span>
  <span class="p">};</span>
  
  <span class="c1">// Default constructor</span>
  <span class="n">PWM</span><span class="o">::</span><span class="n">PWM</span><span class="p">()</span> <span class="p">{}</span>
  
  <span class="c1">// Overload constructor with the pin's id</span>
  <span class="n">PWM</span><span class="o">::</span><span class="n">PWM</span><span class="p">(</span><span class="kt">int</span> <span class="n">newPWMPin</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">id</span> <span class="o">=</span> <span class="n">newPWMPin</span><span class="p">;</span>
    <span class="n">period</span> <span class="o">=</span> <span class="mi">500000</span><span class="p">;</span>
    <span class="n">InitPWMPin</span><span class="p">();</span>
    <span class="n">SetPeriod</span><span class="p">(</span><span class="n">period</span><span class="p">);</span>
  <span class="p">}</span>
  
  <span class="c1">// Overload constructor </span>
  <span class="n">PWM</span><span class="o">::</span><span class="n">PWM</span><span class="p">(</span><span class="kt">int</span> <span class="n">pwmPin</span><span class="p">,</span> <span class="kt">int</span> <span class="n">newPeriod</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">id</span> <span class="o">=</span> <span class="n">pwmPin</span><span class="p">;</span>
    <span class="n">period</span> <span class="o">=</span> <span class="n">newPeriod</span><span class="p">;</span>
    <span class="n">InitPWMPin</span><span class="p">();</span>
    <span class="n">SetPeriod</span><span class="p">(</span><span class="n">newPeriod</span><span class="p">);</span> 
    <span class="n">cout</span>  <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="s">"Setting the PWM pin with a period of "</span><span class="p">,</span> <span class="s">"Pink"</span><span class="p">)</span>
          <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">to_string</span><span class="p">(</span><span class="n">GetPeriod</span><span class="p">()),</span> <span class="s">"Pink"</span><span class="p">)</span> 
          <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="s">"ns was a success!"</span><span class="p">,</span> <span class="s">"Pink"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> 
  <span class="p">}</span>
  
  <span class="c1">// Public method to initialize the PWM pin</span>
  <span class="kt">void</span> <span class="n">PWM</span><span class="o">::</span><span class="n">InitPWMPin</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="n">idMap</span><span class="p">[</span><span class="n">P8_13</span><span class="p">]</span> <span class="o">=</span> <span class="s">"P8.13"</span><span class="p">;</span>
    <span class="n">idMap</span><span class="p">[</span><span class="n">P8_19</span><span class="p">]</span> <span class="o">=</span> <span class="s">"P8.19"</span><span class="p">;</span>
    <span class="n">idMap</span><span class="p">[</span><span class="n">P9_14</span><span class="p">]</span> <span class="o">=</span> <span class="s">"P9.14"</span><span class="p">;</span>
    <span class="n">idMap</span><span class="p">[</span><span class="n">P9_16</span><span class="p">]</span> <span class="o">=</span> <span class="s">"P9.16"</span><span class="p">;</span>
    <span class="n">idMap</span><span class="p">[</span><span class="n">P9_21</span><span class="p">]</span> <span class="o">=</span> <span class="s">"P9.21"</span><span class="p">;</span>
    <span class="n">idMap</span><span class="p">[</span><span class="n">P9_22</span><span class="p">]</span> <span class="o">=</span> <span class="s">"P9.22"</span><span class="p">;</span>
  
    <span class="k">switch</span> <span class="p">(</span><span class="n">id</span><span class="p">)</span>
    <span class="p">{</span>
    <span class="k">case</span> <span class="n">P8_13</span><span class="p">:</span>
      <span class="n">name</span> <span class="o">=</span> <span class="n">EHRPWM2_PATH</span> <span class="o">+</span> <span class="s">"pwmchip6/pwm-6:1/"</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="n">P8_19</span><span class="p">:</span>
      <span class="n">name</span> <span class="o">=</span> <span class="n">EHRPWM2_PATH</span> <span class="o">+</span> <span class="s">"pwmchip6/pwm-6:0/"</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="n">P9_14</span><span class="p">:</span>
      <span class="n">name</span> <span class="o">=</span> <span class="n">EHRPWM1_PATH</span> <span class="o">+</span> <span class="s">"pwmchip3/pwm-3:0/"</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="n">P9_16</span><span class="p">:</span>
      <span class="n">name</span> <span class="o">=</span> <span class="n">EHRPWM1_PATH</span> <span class="o">+</span> <span class="s">"pwmchip3/pwm-3:1/"</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="n">P9_21</span><span class="p">:</span>
      <span class="n">name</span> <span class="o">=</span> <span class="n">EHRPWM0_PATH</span> <span class="o">+</span> <span class="s">"pwmchip1/pwm-1:1/"</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="n">P9_22</span><span class="p">:</span>
      <span class="n">name</span> <span class="o">=</span> <span class="n">EHRPWM0_PATH</span> <span class="o">+</span> <span class="s">"pwmchip1/pwm-1:0/"</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="nl">default:</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">path</span> <span class="o">=</span> <span class="n">PWM_PATH</span> <span class="o">+</span> <span class="n">name</span><span class="p">;</span>
  
    <span class="n">cout</span>  <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="s">"Trying to enable the PWM pin: "</span><span class="p">,</span><span class="s">"Pink"</span><span class="p">)</span> 
          <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">idMap</span><span class="p">[</span><span class="n">id</span><span class="p">],</span> <span class="s">"Pink"</span><span class="p">,</span> <span class="s">"Default"</span><span class="p">,</span> <span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">string</span> <span class="n">commandString</span> <span class="o">=</span> <span class="s">"config-pin "</span> <span class="o">+</span> <span class="n">idMap</span><span class="p">[</span><span class="n">id</span><span class="p">]</span> <span class="o">+</span> <span class="s">" pwm"</span><span class="p">;</span>
    <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">command</span> <span class="o">=</span> <span class="n">commandString</span><span class="p">.</span><span class="n">c_str</span><span class="p">();</span>
    <span class="n">system</span><span class="p">(</span><span class="n">command</span><span class="p">);</span>
  
    <span class="n">Enable</span><span class="p">();</span>
  <span class="p">}</span>
  
  <span class="cm">/*
     Private method to enable the PWM on the pin.
     It is used in the constructor
     @return int: 1 set duty cycle has succeeded / throw an exception if not
  */</span>
  <span class="kt">int</span> <span class="n">PWM</span><span class="o">::</span><span class="n">Enable</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">WriteFile</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s">"enable"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">perror</span><span class="p">(</span><span class="s">"Error trying to enable the PWM on the pin"</span><span class="p">);</span>
      <span class="k">throw</span> <span class="n">PWM_Exception</span><span class="p">(</span><span class="s">"Error in the 'Enable' method"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span> 
    <span class="p">{</span>
      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="cm">/*
     Private method to disable the PWM on the pin.
     It is used in the constructor
     @return int: 1 set duty cycle has succeeded / throw an exception if not
  */</span>
  <span class="kt">int</span> <span class="n">PWM</span><span class="o">::</span><span class="n">Disable</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">WriteFile</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s">"enable"</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">perror</span><span class="p">(</span><span class="s">"Error trying to disable the PWM on the pin"</span><span class="p">);</span>
      <span class="k">throw</span> <span class="n">PWM_Exception</span><span class="p">(</span><span class="s">"Error in the 'Disable' method"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span> 
    <span class="p">{</span>
      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="cm">/*
     Public method to get the period 
     @return int: The pin's period
  */</span>
  <span class="kt">int</span> <span class="n">PWM</span><span class="o">::</span><span class="n">GetPeriod</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="k">return</span> <span class="n">period</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="cm">/*
     Public method to get the period 
     @return int: The pin's duty cycle
  */</span>
  <span class="kt">int</span> <span class="n">PWM</span><span class="o">::</span><span class="n">GetDutyCycle</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="k">return</span> <span class="n">dutyCycle</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="cm">/*
    Public method to set the period of the PWM
    The chosen period is in nanoseconds 
    @param int: The desired period
    @return int: 1 set period has succeeded / throw an exception if not
  */</span>
  <span class="kt">int</span> <span class="n">PWM</span><span class="o">::</span><span class="n">SetPeriod</span><span class="p">(</span><span class="kt">int</span> <span class="n">newPeriod</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">period</span> <span class="o">=</span> <span class="n">newPeriod</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">WriteFile</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s">"period"</span><span class="p">,</span> <span class="n">period</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">perror</span><span class="p">(</span><span class="s">"Error setting the PWM period for the pin"</span><span class="p">);</span>
      <span class="k">throw</span> <span class="n">PWM_Exception</span><span class="p">(</span><span class="s">"Error in the 'SetPeriod' method"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span> 
    <span class="p">{</span>
      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="cm">/*
     Public method to set the duty cycle of the PWM
     @param int: The desired duty cycle in pertentage: 0-100
     @return  int: 1 set duty cycle has succeeded / throw an exception if not
  */</span>
  <span class="kt">int</span> <span class="n">PWM</span><span class="o">::</span><span class="n">SetDutyCycle</span><span class="p">(</span><span class="kt">int</span> <span class="n">newDutyCycle</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">newDutyCycle</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">newDutyCycle</span> <span class="o">&lt;=</span> <span class="mi">100</span><span class="p">)</span>
      <span class="n">dutyCycle</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">newDutyCycle</span> <span class="o">/</span> <span class="mf">100.0</span> <span class="o">*</span> <span class="n">period</span><span class="p">);</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">newDutyCycle</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
      <span class="n">dutyCycle</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">else</span>
      <span class="n">dutyCycle</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="n">WriteFile</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s">"duty_cycle"</span><span class="p">,</span> <span class="n">dutyCycle</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">else</span> 
    <span class="p">{</span>
      <span class="n">perror</span><span class="p">(</span><span class="s">"Error setting the PWM duty cycle for the pin"</span><span class="p">);</span>
      <span class="k">throw</span> <span class="n">PWM_Exception</span><span class="p">(</span><span class="s">"Error in WritePWMDutyCycle method"</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="cm">/*
    Public method to do a delay in milliseconds
    @param int: duration of the delay
  */</span>
  <span class="kt">void</span> <span class="n">PWM</span><span class="o">::</span><span class="n">Delayms</span><span class="p">(</span><span class="kt">int</span> <span class="n">millisecondsToSleep</span><span class="p">)</span> 
  <span class="p">{</span>
    <span class="n">this_thread</span><span class="o">::</span><span class="n">sleep_for</span><span class="p">(</span><span class="n">chrono</span><span class="o">::</span><span class="n">milliseconds</span><span class="p">(</span><span class="n">millisecondsToSleep</span><span class="p">));</span>
  <span class="p">}</span>
  
  <span class="cm">/*
    Public callback method to do a user customized function when is called
    @param callbackType: user function pointer to execute 
    @return int: 1 the user function was called      
  */</span>
  <span class="kt">int</span> <span class="n">PWM</span><span class="o">::</span><span class="n">DoUserFunction</span> <span class="p">(</span><span class="n">callbackType</span> <span class="n">callbackFunction</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">string</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"'UserFunction' method has been activated!"</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Orange"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
  
    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">functionThread</span><span class="p">(</span><span class="n">callbackFunction</span><span class="p">);</span>
    <span class="n">functionThread</span><span class="p">.</span><span class="n">detach</span><span class="p">();</span>
    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="c1">// Destructor</span>
  <span class="n">PWM</span><span class="o">::~</span><span class="n">PWM</span><span class="p">()</span> 
  <span class="p">{</span>
    <span class="k">this</span><span class="o">-&gt;</span><span class="n">SetDutyCycle</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
  <span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="adch">ADC.h</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
</pre></td><td class="rouge-code"><pre><span class="cp">#ifndef ADC_H
#define ADC_H
</span>
<span class="cp">#include &lt;string&gt;
#include &lt;thread&gt;
</span>
<span class="cp">#include "RAINBOWCOLORS.h"
#include "SYSFILEACCESS.h"
</span>
<span class="cm">/* 
  Declare a type for a function pointer
  It is the construct for: using function_type = int (*) ()
    function_type:  the function name
    int: return type  
    (*): the dereference operator due to the address of the function name
    (): the arguments of the function, in this case void
  Stores the address of a function 
*/</span>
<span class="k">using</span> <span class="n">callbackType</span> <span class="o">=</span> <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="p">)();</span>

<span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">ADC_PATH</span> <span class="o">=</span> <span class="s">"/sys/bus/iio/devices/iio:device0/"</span><span class="p">;</span>

<span class="cm">/* The pwm class internal number of the pin*/</span>
<span class="k">enum</span> <span class="n">ID</span> <span class="p">{</span>
  <span class="n">P9_39</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
  <span class="n">P9_40</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> 
  <span class="n">P9_37</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span>
  <span class="n">P9_38</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span>
  <span class="n">P9_33</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span>
  <span class="n">P9_36</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span>
  <span class="n">P9_35</span> <span class="o">=</span> <span class="mi">6</span><span class="p">,</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">ADC</span> <span class="o">:</span> <span class="k">public</span> <span class="n">SYSFILEACCESS</span>
<span class="p">{</span>
  <span class="nl">private:</span>
    <span class="kt">int</span> <span class="n">id</span><span class="p">;</span> <span class="cm">/* The ADC number of the object */</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">idMap</span><span class="p">[</span><span class="mi">7</span><span class="p">];</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">path</span><span class="p">;</span> <span class="cm">/* The full path to the ADC e.g. /sys/bus/iio/devices/iio:device0/in_voltage0_raw */</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">;</span> <span class="cm">/* The name of the ADC e.g. in_voltage0_raw */</span>
    <span class="kt">int</span> <span class="n">adcValue</span><span class="p">;</span>

    <span class="kt">bool</span> <span class="n">stopReadADCFlag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="n">stopReadVoltageFlag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>

    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">ReadADCThread</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">ReadVoltageThread</span><span class="p">;</span>

    <span class="kt">void</span> <span class="n">MakeReadADC</span><span class="p">(</span><span class="kt">int</span> <span class="o">&amp;</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
    <span class="kt">void</span> <span class="n">MakeReadVoltage</span><span class="p">(</span><span class="kt">float</span> <span class="o">&amp;</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>

  <span class="nl">protected:</span>
    <span class="c1">// Helper method to get the ADC value on pin</span>
    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">GetADC</span><span class="p">();</span>

  <span class="nl">public:</span>
    <span class="c1">// Default constructor</span>
    <span class="n">ADC</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>

    <span class="c1">// Interface method to read one time the adc value on the pin</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">ReadADC</span><span class="p">(</span><span class="kt">int</span> <span class="o">&amp;</span><span class="p">);</span>

    <span class="c1">// Overload interface method for reading the ADC value with a delay on the pin</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">ReadADC</span><span class="p">(</span><span class="kt">int</span> <span class="o">&amp;</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>

    <span class="c1">// Interface method for reading the ADC value continuosly on the pin</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">ReadADC</span><span class="p">(</span><span class="kt">int</span> <span class="o">&amp;</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">bool</span><span class="p">);</span>

    <span class="c1">// Interface method to read one time the voltage on the pin</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">ReadVoltage</span><span class="p">(</span><span class="kt">float</span> <span class="o">&amp;</span><span class="p">);</span>

    <span class="c1">// Overload interface method for reading the voltage with a delay on the pin</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">ReadVoltage</span><span class="p">(</span><span class="kt">float</span> <span class="o">&amp;</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>

    <span class="c1">// Interface method for reading the voltage continuosly on the pin</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">ReadVoltage</span><span class="p">(</span><span class="kt">float</span> <span class="o">&amp;</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">bool</span><span class="p">);</span>
    
    <span class="c1">// Method to do execute an user function</span>
    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">DoUserFunction</span><span class="p">(</span><span class="n">callbackType</span><span class="p">);</span>

    <span class="c1">// Method to stop the ADC continuos sampling </span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">StopReadADC</span><span class="p">();</span>

    <span class="c1">// Method to stop the voltage continuos sampling</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">StopReadVoltage</span><span class="p">();</span>
    
    <span class="c1">// Delay method in milliseconds</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">Delayms</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>

    <span class="c1">// Destructor</span>
    <span class="k">virtual</span> <span class="o">~</span><span class="n">ADC</span><span class="p">();</span>
<span class="p">};</span>
<span class="cp">#endif // ADC_H
</span></pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="adccpp">ADC.cpp</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;iostream&gt;
</span>  <span class="cp">#include &lt;fstream&gt;
</span>  <span class="cp">#include &lt;string&gt;
</span>  <span class="cp">#include &lt;chrono&gt; // chrono::milliseconds()
</span>  <span class="cp">#include &lt;thread&gt; // this_thread::sleep_for()
</span>  <span class="cp">#include &lt;exception&gt;
</span>  <span class="cp">#include &lt;mutex&gt;
</span>  
  <span class="cp">#include "ADC.h"
</span>  
  <span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
  
  <span class="k">class</span> <span class="nc">ADC_Exception</span> <span class="o">:</span> <span class="k">public</span> <span class="n">exception</span> 
  <span class="p">{</span>
    <span class="nl">private:</span>
      <span class="n">string</span> <span class="n">reason</span><span class="p">;</span>
    <span class="nl">public:</span>
      <span class="n">ADC_Exception</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">why</span><span class="p">)</span> <span class="o">:</span> <span class="n">reason</span> <span class="p">(</span><span class="n">why</span><span class="p">)</span> <span class="p">{};</span>
      <span class="k">virtual</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">what</span><span class="p">()</span>
      <span class="p">{</span>
        <span class="k">return</span> <span class="n">reason</span><span class="p">.</span><span class="n">c_str</span><span class="p">();</span>
      <span class="p">}</span>
  <span class="p">};</span>
  
  <span class="c1">// Overload constructor with 2 arguments</span>
  <span class="n">ADC</span><span class="o">::</span><span class="n">ADC</span><span class="p">(</span><span class="kt">int</span> <span class="n">adcPin</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">id</span> <span class="o">=</span> <span class="n">adcPin</span><span class="p">;</span>
  
    <span class="n">idMap</span><span class="p">[</span><span class="n">P9_39</span><span class="p">]</span> <span class="o">=</span> <span class="s">"P9_39"</span><span class="p">;</span>
    <span class="n">idMap</span><span class="p">[</span><span class="n">P9_40</span><span class="p">]</span> <span class="o">=</span> <span class="s">"P9_40"</span><span class="p">;</span>
    <span class="n">idMap</span><span class="p">[</span><span class="n">P9_37</span><span class="p">]</span> <span class="o">=</span> <span class="s">"P9_37"</span><span class="p">;</span>
    <span class="n">idMap</span><span class="p">[</span><span class="n">P9_38</span><span class="p">]</span> <span class="o">=</span> <span class="s">"P9_38"</span><span class="p">;</span>
    <span class="n">idMap</span><span class="p">[</span><span class="n">P9_33</span><span class="p">]</span> <span class="o">=</span> <span class="s">"P9_33"</span><span class="p">;</span>
    <span class="n">idMap</span><span class="p">[</span><span class="n">P9_36</span><span class="p">]</span> <span class="o">=</span> <span class="s">"P9_36"</span><span class="p">;</span>
    <span class="n">idMap</span><span class="p">[</span><span class="n">P9_35</span><span class="p">]</span> <span class="o">=</span> <span class="s">"P9_35"</span><span class="p">;</span>
  
    <span class="n">name</span> <span class="o">=</span> <span class="s">"in_voltage"</span> <span class="o">+</span> <span class="n">to_string</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="o">+</span> <span class="s">"_raw"</span><span class="p">;</span>
    <span class="n">path</span> <span class="o">=</span> <span class="n">ADC_PATH</span> <span class="o">+</span> <span class="n">name</span><span class="p">;</span>
  
    <span class="n">cout</span>  <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="s">"Trying to enable the ADC on pin: "</span><span class="p">,</span><span class="s">"Violet"</span><span class="p">)</span> 
          <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">idMap</span><span class="p">[</span><span class="n">id</span><span class="p">],</span> <span class="s">"Violet"</span><span class="p">,</span> <span class="s">"Default"</span><span class="p">,</span> <span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
  
    <span class="n">GetADC</span><span class="p">();</span>
    <span class="n">cout</span>  <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="s">"Setting the ADC pin was a success!"</span><span class="p">,</span> <span class="s">"Violet"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> 
  <span class="p">}</span>
  
  <span class="cm">/*
    Protected method to get the ADC value on pin 
    @return int: The pin's value between 0 - 4095
  */</span>
  <span class="kt">int</span> <span class="n">ADC</span><span class="o">::</span><span class="n">GetADC</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="n">adcValue</span> <span class="o">=</span> <span class="n">ReadFile</span><span class="p">(</span><span class="n">path</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span> <span class="n">adcValue</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">perror</span><span class="p">(</span><span class="s">"Error trying to read the ADC on the pin"</span><span class="p">);</span>
      <span class="k">throw</span> <span class="n">ADC_Exception</span><span class="p">(</span><span class="s">"Error in the 'ReadADC' method"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
      <span class="k">return</span> <span class="n">adcValue</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="cm">/*
     Public method to get the ADC value on pin 
     @return int: The pin's value between 0 - 4095
  */</span>
  <span class="kt">void</span> <span class="n">ADC</span><span class="o">::</span><span class="n">ReadADC</span><span class="p">(</span><span class="kt">int</span> <span class="o">&amp;</span><span class="n">adcValueOut</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">adcValueOut</span> <span class="o">=</span> <span class="n">GetADC</span><span class="p">();</span>
  <span class="p">}</span>
  
  <span class="cm">/*
    Public method to get one the ADC value on pin and wait a time Interval
    @param int: Reference output for the ADC value between 0 - 4095
    @param int: The time interval between each sample
  */</span>
  <span class="kt">void</span> <span class="n">ADC</span><span class="o">::</span><span class="n">ReadADC</span><span class="p">(</span><span class="kt">int</span> <span class="o">&amp;</span><span class="n">adcValueOut</span><span class="p">,</span> <span class="kt">int</span> <span class="n">timeInterval</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">ReadADC</span><span class="p">(</span><span class="n">adcValueOut</span><span class="p">);</span>
    <span class="n">Delayms</span><span class="p">(</span><span class="n">timeInterval</span><span class="p">);</span>
  <span class="p">}</span>
  
  <span class="cm">/*
    Public method to get continuosly the ADC value on pin 
    @param int: Reference output for the ADC value between 0 - 4095
    @param int: The time interval between each sample
  */</span>
  <span class="kt">void</span> <span class="n">ADC</span><span class="o">::</span><span class="n">ReadADC</span><span class="p">(</span><span class="kt">int</span> <span class="o">&amp;</span><span class="n">adcValueOut</span><span class="p">,</span> <span class="kt">int</span> <span class="n">timeInterval</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">runInBackground</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">runInBackground</span> <span class="o">==</span> <span class="nb">true</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"Read ADC input has been activated"</span><span class="p">;</span>
      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Violet"</span><span class="p">,</span> <span class="s">"Default"</span><span class="p">,</span> <span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
      <span class="n">ReadADCThread</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ADC</span><span class="o">::</span><span class="n">MakeReadADC</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ref</span><span class="p">(</span><span class="n">adcValueOut</span><span class="p">),</span><span class="n">timeInterval</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="cm">/*
    Private method that contains the routine to make the ADC read 
    @param int: A reference variable to store The pin's value between 0 - 4095
  */</span>
  <span class="kt">void</span> <span class="n">ADC</span><span class="o">::</span><span class="n">MakeReadADC</span><span class="p">(</span><span class="kt">int</span> <span class="o">&amp;</span><span class="n">adcValueOut</span><span class="p">,</span> <span class="kt">int</span> <span class="n">timeInterval</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">stopReadADCFlag</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="k">this</span><span class="o">-&gt;</span><span class="n">ReadADC</span><span class="p">(</span><span class="n">adcValueOut</span><span class="p">);</span>
      <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"ADC value on pin "</span> <span class="o">+</span> <span class="n">idMap</span><span class="p">[</span><span class="n">id</span><span class="p">]</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span> <span class="n">to_string</span><span class="p">(</span><span class="n">adcValueOut</span><span class="p">);</span>
      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Violet"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
      <span class="n">Delayms</span><span class="p">(</span><span class="n">timeInterval</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="cm">/*
    Public method to stop reading the ADC 
  */</span>
  <span class="kt">void</span> <span class="n">ADC</span><span class="o">::</span><span class="n">StopReadADC</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="n">stopReadADCFlag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="cm">/*
    Public method to get the voltage on the pin
    @param float: Reference output for the ADC value between 0 - 1.8
  */</span>
  <span class="kt">void</span> <span class="n">ADC</span><span class="o">::</span><span class="n">ReadVoltage</span><span class="p">(</span><span class="kt">float</span> <span class="o">&amp;</span><span class="n">voltageOut</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">voltageOut</span> <span class="o">=</span> <span class="n">GetADC</span><span class="p">()</span> <span class="o">*</span> <span class="mf">1.8</span> <span class="o">/</span> <span class="mi">4095</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="cm">/*
    Public method to get the voltage on the pin
    @param float: Reference output for the ADC value between 0 - 1.8
    @param int: The time interval between each sample
  */</span>
  <span class="kt">void</span> <span class="n">ADC</span><span class="o">::</span><span class="n">ReadVoltage</span><span class="p">(</span><span class="kt">float</span> <span class="o">&amp;</span><span class="n">voltageOut</span><span class="p">,</span> <span class="kt">int</span> <span class="n">timeInterval</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">this</span><span class="o">-&gt;</span><span class="n">ReadVoltage</span><span class="p">(</span><span class="n">voltageOut</span><span class="p">);</span>
    <span class="n">Delayms</span><span class="p">(</span><span class="n">timeInterval</span><span class="p">);</span>
  <span class="p">}</span>
  
  <span class="cm">/*
    Public method to get continuosly the voltage value on pin 
    @param float: Reference output for the ADC value between 0 - 1.8
    @param int: The time interval between each sample
  */</span>
  <span class="kt">void</span> <span class="n">ADC</span><span class="o">::</span><span class="n">ReadVoltage</span><span class="p">(</span><span class="kt">float</span> <span class="o">&amp;</span><span class="n">voltageOut</span><span class="p">,</span> <span class="kt">int</span> <span class="n">timeInterval</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">runInBackground</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span>  <span class="n">message</span> <span class="o">=</span> <span class="s">"Read voltage in a thread has been activated"</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Violet"</span><span class="p">,</span> <span class="s">"Default"</span><span class="p">,</span> <span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">ReadVoltageThread</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ADC</span><span class="o">::</span><span class="n">MakeReadVoltage</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ref</span><span class="p">(</span><span class="n">voltageOut</span><span class="p">),</span><span class="n">timeInterval</span><span class="p">);</span>
  <span class="p">}</span>
  
  <span class="cm">/*
    Private method that contains the routine to make the ADC read 
    @param int: A reference variable to store The pin's value between 0 - 4095
  */</span>
  <span class="kt">void</span> <span class="n">ADC</span><span class="o">::</span><span class="n">MakeReadVoltage</span><span class="p">(</span><span class="kt">float</span> <span class="o">&amp;</span><span class="n">voltageOut</span><span class="p">,</span> <span class="kt">int</span> <span class="n">timeInterval</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">stopReadVoltageFlag</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="k">this</span><span class="o">-&gt;</span><span class="n">ReadVoltage</span><span class="p">(</span><span class="n">voltageOut</span><span class="p">);</span>
      <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"Voltage on pin "</span> <span class="o">+</span> <span class="n">idMap</span><span class="p">[</span><span class="n">id</span><span class="p">]</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span> <span class="n">to_string</span><span class="p">(</span><span class="n">voltageOut</span><span class="p">);</span>
      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Violet"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
      <span class="n">Delayms</span><span class="p">(</span><span class="n">timeInterval</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="cm">/*
    Public method to stop reading the voltage 
  */</span>
  <span class="kt">void</span> <span class="n">ADC</span><span class="o">::</span><span class="n">StopReadVoltage</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="n">stopReadVoltageFlag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="cm">/*
    Public callback method to do a user Customized function when is called
    @param callbackType: user function pointer to execute 
    @return int: 1 the user function was called      
  */</span>
  
  <span class="kt">int</span> <span class="n">ADC</span><span class="o">::</span><span class="n">DoUserFunction</span> <span class="p">(</span><span class="n">callbackType</span> <span class="n">callbackFunction</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"'UserFunction' method has been activated!"</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Violet"</span><span class="p">,</span> <span class="s">"Default"</span><span class="p">,</span> <span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
  
    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">functionThread</span><span class="p">(</span><span class="n">callbackFunction</span><span class="p">);</span>
    <span class="n">functionThread</span><span class="p">.</span><span class="n">detach</span><span class="p">();</span>
    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="cm">/*
    Public method to do a delay in milliseconds
    @param int: duration of the delay
  */</span>
  <span class="kt">void</span> <span class="n">ADC</span><span class="o">::</span><span class="n">Delayms</span><span class="p">(</span><span class="kt">int</span> <span class="n">millisecondsToSleep</span><span class="p">)</span> 
  <span class="p">{</span>
    <span class="n">this_thread</span><span class="o">::</span><span class="n">sleep_for</span><span class="p">(</span><span class="n">chrono</span><span class="o">::</span><span class="n">milliseconds</span><span class="p">(</span><span class="n">millisecondsToSleep</span><span class="p">));</span>
  <span class="p">}</span>
  
  <span class="c1">// Destructor</span>
  <span class="n">ADC</span><span class="o">::~</span><span class="n">ADC</span><span class="p">()</span> 
  <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ReadADCThread</span><span class="p">.</span><span class="n">joinable</span><span class="p">())</span>
      <span class="n">ReadADCThread</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ReadVoltageThread</span><span class="p">.</span><span class="n">joinable</span><span class="p">())</span>
      <span class="n">ReadVoltageThread</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>
  
    <span class="c1">// Waiting for the last reading on the pin</span>
    <span class="k">this</span><span class="o">-&gt;</span><span class="n">Delayms</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
    <span class="n">cout</span>  <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="s">"Stopping the reading on the ADC PIN: "</span><span class="p">,</span><span class="s">"Violet"</span><span class="p">)</span>
          <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">idMap</span><span class="p">[</span><span class="n">id</span><span class="p">],</span> <span class="s">"Violet"</span><span class="p">,</span> <span class="s">"Default"</span><span class="p">,</span> <span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
  <span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Se you in the next post.</p>
:ET