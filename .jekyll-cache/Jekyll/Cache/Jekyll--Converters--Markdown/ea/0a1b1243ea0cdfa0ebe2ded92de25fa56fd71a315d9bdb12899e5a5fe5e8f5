I"°7<p>In this post, I show how to use a median filter for measuring the distance with the cheap ultrasonic sensor HC_SR04. This class is part of a whole library that can be found  <a href="https://github.com/wgaonar/BeagleCPP">here</a>. As a reference, an excellent article about how to implement a median filter on Arduino can be found <a href="https://www.luisllamas.es/arduino-filtro-mediana-rapido/">here</a> in the Luis Llamas Blog.</p>

<p>I use a voltage level shifter between 3.3V and 5.0V to prevent damage to the BeagleBone. It is important to remember that the logic voltage for the BeagleBone is <font color="red">3.3V</font>. If the user provides a greater voltage, the BeagleBone could be damaged.</p>

<h2 id="circuit-and-components">Circuit and components</h2>

<p>The circuit can be seen in Figure 1. It consists of a voltage level shifter, an HC-SRO4, and the BeagleBone. The pins used for trigger and echo are <strong>P9_15</strong> and <strong>P9_17</strong> and these were configured as digital output and input respectively.</p>

<p>The components are:</p>
<ul>
  <li>1 Ultrasonic Sensor HC_SR04</li>
  <li>1 Level Shifter for 3.3V - 5.0V TXS0108E</li>
  <li>1 Protoboard mini</li>
  <li>Jumpers male-male to make the connections</li>
</ul>

<figure style="text-align: center; width:70%; 
              margin-left: auto; 
              margin-right: auto;">
    <img src="../assets/images/Post35/Circuit.png" alt="circuit.png" width="100%" />
  <figcaption>
    Figure 1: Circuit to measure the distance with the ultrasonic sensor HC_SR04.
  </figcaption>
</figure>

<h2 id="coding">Coding</h2>
<p>First, an <code class="language-plaintext highlighter-rouge">HC_SR04</code> object is declared with global scope and using a previously <code class="language-plaintext highlighter-rouge">GPIO</code> declared objects:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="c1">// Declaring the pins</span>
<span class="n">GPIO</span> <span class="nf">triggerPin</span><span class="p">(</span><span class="n">P9_15</span><span class="p">);</span>
<span class="n">GPIO</span> <span class="nf">echoPin</span><span class="p">(</span><span class="n">P9_17</span><span class="p">);</span>

<span class="c1">// Declaring the HC_SR04 object</span>
<span class="n">HC_SR04</span> <span class="nf">distanceSensor</span> <span class="p">(</span><span class="n">triggerPin</span><span class="p">,</span> <span class="n">echoPin</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>The <code class="language-plaintext highlighter-rouge">distanceSensor.MeasureDistanceCmWithMedian()</code> method is called on the previously defined <code class="language-plaintext highlighter-rouge">HC_SR04</code> object. This activates the sensor through the trigger pin and waits for the pulse in the echo pin to measure the distance by counting the time required by the acoustic wave to come back to the sensor after it has hit an object. The method is shown in the next listing where it can be seen that some measurements are done and stored in a <code class="language-plaintext highlighter-rouge">list&lt;&gt;</code> which is a container which sorts its values and therefore the median can be extracted easily. The minimum and maximum values for the number of measurements (window size) are 3 and 11, respectively.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="rouge-code"><pre><span class="kt">double</span> <span class="n">HC_SR04</span><span class="o">::</span><span class="n">MeasureDistanceCmWithMedian</span><span class="p">(</span><span class="kt">int</span> <span class="n">windowSize</span><span class="p">)</span>
<span class="p">{</span>
  <span class="c1">// Check for unreasonable window sizes values</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">windowSize</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">)</span>
    <span class="n">windowSize</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">windowSize</span> <span class="o">&gt;</span> <span class="mi">11</span><span class="p">)</span> 
    <span class="n">windowSize</span> <span class="o">=</span> <span class="mi">11</span><span class="p">;</span>

  <span class="n">std</span><span class="o">::</span><span class="n">list</span> <span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">windowValues</span><span class="p">;</span>

  <span class="c1">// Make the measures for the window</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">windowSize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">windowValues</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">MeasureDistanceCm</span><span class="p">());</span>
  <span class="p">}</span>

  <span class="c1">// Sort the list of values </span>
  <span class="n">windowValues</span><span class="p">.</span><span class="n">sort</span><span class="p">();</span>

  <span class="c1">// Search for the median position</span>
  <span class="k">auto</span> <span class="n">median</span> <span class="o">=</span> <span class="n">windowValues</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
  <span class="n">advance</span><span class="p">(</span><span class="n">median</span> <span class="p">,</span> <span class="n">windowValues</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">/</span> <span class="mi">2</span> <span class="p">);</span>

  <span class="k">return</span> <span class="o">*</span><span class="n">median</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>In the main program a <code class="language-plaintext highlighter-rouge">while loop</code> can be used to measure the distance each 250ms until the distance measurement will be less than 5cm:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span> 
<span class="p">{</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Distance reading: "</span> <span class="o">&lt;&lt;</span> <span class="n">count</span> <span class="o">&lt;&lt;</span> <span class="s">" = "</span> <span class="o">&lt;&lt;</span> <span class="n">distance</span> <span class="o">&lt;&lt;</span> <span class="s">"cm</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
  <span class="n">count</span><span class="o">++</span><span class="p">;</span>
  <span class="n">Delayms</span><span class="p">(</span><span class="mi">250</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">distance</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">)</span> 
  <span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Too close! Exiting...</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="k">break</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">else</span> <span class="n">distance</span> <span class="o">=</span> <span class="n">distanceSensor</span><span class="p">.</span><span class="n">MeasureDistanceCmWithMedian</span><span class="p">(</span><span class="mi">7</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The complete code for this application is shown in the next listing together with its corresponding execution output.</p>

<h3 id="hc_sr04_12cpp">HC_SR04_1.2.cpp</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
</pre></td><td class="rouge-code"><pre><span class="cm">/******************************************************************************
HC_SR04_1.2.cpp
@wgaonar
28/06/2021
https://github.com/wgaonar/BeagleCPP

Uses a Median filter for the sensor readings, if detected distance 
is less than 5cm the program finishes 

Class: HC_SR04
******************************************************************************/</span>

<span class="cp">#include &lt;iostream&gt;
#include &lt;list&gt;
</span>
<span class="cp">#include "../../../Sources/GPIO.h"
#include "../../../Sources/HC_SR04.h"
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="c1">// Declaring the pins</span>
<span class="n">GPIO</span> <span class="nf">triggerPin</span><span class="p">(</span><span class="n">P9_15</span><span class="p">);</span>
<span class="n">GPIO</span> <span class="nf">echoPin</span><span class="p">(</span><span class="n">P9_17</span><span class="p">);</span>

<span class="c1">// Declaring the HC_SR04 object</span>
<span class="n">HC_SR04</span> <span class="nf">distanceSensor</span> <span class="p">(</span><span class="n">triggerPin</span><span class="p">,</span> <span class="n">echoPin</span><span class="p">);</span>


<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">string</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"</span><span class="se">\n</span><span class="s">Main program starting here..."</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span><span class="s">"Blue"</span><span class="p">,</span> <span class="s">"White"</span><span class="p">,</span> <span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

  <span class="kt">double</span> <span class="n">distance</span> <span class="o">=</span> <span class="n">distanceSensor</span><span class="p">.</span><span class="n">MeasureDistanceCmWithMedian</span><span class="p">(</span><span class="mi">7</span><span class="p">);</span>
  <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span> 
  <span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Distance reading: "</span> <span class="o">&lt;&lt;</span> <span class="n">count</span> <span class="o">&lt;&lt;</span> <span class="s">" = "</span> <span class="o">&lt;&lt;</span> <span class="n">distance</span> <span class="o">&lt;&lt;</span> <span class="s">"cm</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="n">count</span><span class="o">++</span><span class="p">;</span>
    <span class="n">Delayms</span><span class="p">(</span><span class="mi">250</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">distance</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">)</span> 
    <span class="p">{</span>
      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Too close! Exiting...</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="n">distance</span> <span class="o">=</span> <span class="n">distanceSensor</span><span class="p">.</span><span class="n">MeasureDistanceCmWithMedian</span><span class="p">(</span><span class="mi">7</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="n">message</span> <span class="o">=</span> <span class="s">"</span><span class="se">\n</span><span class="s">Main program finishes here..."</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span><span class="s">"Blue"</span><span class="p">,</span> <span class="s">"White"</span><span class="p">,</span><span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="execution-of-the-program">Execution of the program:</h3>
<figure style="text-align: center; width:100%; 
              margin-left: auto; 
              margin-right: auto;">
    <img src="../assets/images/Post35/Execution.png" alt="circuit.png" width="100%" />
  <figcaption>
    Figure 2: Execution of the program.
  </figcaption>
</figure>

<p>Se you in the next post.</p>
:ET