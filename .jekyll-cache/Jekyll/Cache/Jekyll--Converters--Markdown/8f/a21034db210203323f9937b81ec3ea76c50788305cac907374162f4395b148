I"=h<p>In this post, I will show you how to make a flashing on a pair of LEDs, i.e., turn
on and off a Led but with a different duration between the state on and state off.<br />
I will be using the C++ library described in the post 
<a href="/Post13-BeagleBone_LEDClass/"> BeagleBone Black and C++</a> to 
access and control the general purpose digital pins (GPIO) pins of the BeagleBone.</p>

<h2 id="circuit-and-components">Circuit and components</h2>
<p>The circuit can be seen in Figure 1. Please keep in mind that the BeagleBone works at <font color="red">3.3V</font> and not 5V like microcontrollers as Arduino. It is so important to avoid damage to the board, especially when you are working with buttons or digital inputs in general.</p>

<p>The components are:</p>
<ul>
  <li>1 Blue Led of 3mm</li>
  <li>1 Resistor of 1KΩ</li>
  <li>1 White Led of 3mm</li>
  <li>1 Resistor of 1KΩ</li>
  <li>Jumpers male-male to make the connections</li>
</ul>

<figure style="text-align: center; width:70%; 
              margin-left: auto; 
              margin-right: auto;">
    <img src="../assets/images/Post15/Circuit_bb.jpg" alt="Circuit_bb.jpg" width="100%" />
  <figcaption>
    Figure 1: Circuit to make a flashing on a pair of LEDs.
  </figcaption>
</figure>

<h2 id="coding">Coding</h2>
<p>I added the corresponding methods to do the flashing to the class called <b>LED</b> 
and introduced in the post <a href="/Post14-BeagleBone_Blinking/"> 
Blinking a pair of LEDs with the BeagleBone Black</a> who is derived from GPIO class 
mentioned earlier in the introduction. The methods are:</p>

<ul>
  <li>Public methods:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">flash()</code></li>
      <li><code class="language-plaintext highlighter-rouge">stopFlash()</code></li>
    </ul>
  </li>
  <li>Private methods:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">makeFlash()</code></li>
    </ul>
  </li>
</ul>

<p>The <code class="language-plaintext highlighter-rouge">flash()</code> method receives the duration for turning on and the duration for turning off the Led from the main program and it constructs the thread for the flashing pattern through a function pointer called <code class="language-plaintext highlighter-rouge">makeFlash()</code>. This method contains the routine to do the flashing. The most important contribution is about the way that flashing is performed through a <b>thread</b> execution. The advantage is that one o more flashing patterns can be done at the <span style="color: red;font-weight: bold;">same time in a parallel way`.</span></p>

<p>The thread construction is done by the next line, where the <code class="language-plaintext highlighter-rouge">makeFlash()</code>  method is called as a function pointer in the thread. It receives 2 arguments: <code class="language-plaintext highlighter-rouge">timeOn</code> and 
<code class="language-plaintext highlighter-rouge">timeOff</code>, which corresponding to the duration that the led will be On and Off, respectively.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">flashThread</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="p">(</span><span class="o">&amp;</span><span class="n">LED</span><span class="o">::</span><span class="n">makeFlash</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span> <span class="n">timeOn</span><span class="p">,</span> <span class="n">timeOff</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The code that makes the flashing uses the <code class="language-plaintext highlighter-rouge">digitalWrite()</code> and <code class="language-plaintext highlighter-rouge">delayms()</code> methods which are inherited from the GPIO class.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="k">while</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">stopFlashFlag</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">HIGH</span><span class="p">);</span>
  <span class="n">delayms</span><span class="p">(</span><span class="n">timeOn</span><span class="p">);</span>
  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">LOW</span><span class="p">);</span>
  <span class="n">delayms</span><span class="p">(</span><span class="n">timeOff</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>To stop the flashing pattern the user can access the public method 
<code class="language-plaintext highlighter-rouge">stopFlash()</code> and set the boolean variable <code class="language-plaintext highlighter-rouge">stopFlashFlag</code> to true. 
The next line shows how the method reads and assigns the new value to this variable.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">stopFlashFlag</span> <span class="o">=</span> <span class="n">newStopFlashFlag</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Finally, in the destructor of the LED class, the flashing thread is waited to join
once the variable stopFlash has been set to true from the main program and the 
destructor of the base class GPIO is called to unset the pin assigned to the Led.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="k">if</span> <span class="p">(</span><span class="n">flashThread</span><span class="p">.</span><span class="n">joinable</span><span class="p">())</span>
  <span class="n">flashThread</span><span class="p">.</span><span class="n">join</span><span class="p">();</span> 
</pre></td></tr></tbody></table></code></pre></div></div>

<p>This occurs when the user enters the character `‘y’span&gt; from the keyboard due that the  main thread of the program can be used to wait for this input without affecting the flashing.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="kt">char</span> <span class="n">userInput</span> <span class="o">=</span> <span class="sc">'\0'</span><span class="p">;</span>
<span class="k">while</span> <span class="p">(</span><span class="n">userInput</span> <span class="o">!=</span> <span class="sc">'y'</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">message</span> <span class="o">=</span> <span class="s">"Do you want to stop flashing? Enter 'y' for yes: "</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">rainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Violet"</span><span class="p">);</span>
  <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">userInput</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">userInput</span> <span class="o">==</span> <span class="sc">'y'</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">ledPinBlue</span><span class="p">.</span><span class="n">stopFlash</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
    <span class="n">ledPinWhite</span><span class="p">.</span><span class="n">stopFlash</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="coding-1">Coding</h2>

<p>The code is shown in the next listings:</p>

<h3 id="ledh">LED.h</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="rouge-code"><pre><span class="cp">#ifndef LED_H
#define LED_H
#include &lt;thread&gt;
#include "GPIO.h"
</span><span class="k">class</span> <span class="nc">LED</span><span class="o">:</span> <span class="k">public</span> <span class="n">GPIO</span> 
<span class="p">{</span>
  <span class="nl">private:</span>
    <span class="kt">bool</span> <span class="n">stopBlinkFlag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="n">stopFlashFlag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">blinkThread</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">flashThread</span><span class="p">;</span>
    <span class="kt">void</span> <span class="n">makeBlink</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span> 
    <span class="kt">void</span> <span class="n">makeFlash</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>

  <span class="nl">public:</span>
    <span class="c1">// Overload constructor</span>
    <span class="n">LED</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>

    <span class="c1">// Method for doing a blinking pattern</span>
    <span class="kt">void</span> <span class="n">blink</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>

    <span class="c1">// Method for doing a flashing pattern</span>
    <span class="kt">void</span> <span class="n">flash</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>

    <span class="c1">// Method for stoping a blinking</span>
    <span class="kt">void</span> <span class="n">stopBlink</span><span class="p">(</span><span class="kt">bool</span><span class="p">);</span>

    <span class="c1">// Method for stoping a flashing</span>
    <span class="kt">void</span> <span class="n">stopFlash</span><span class="p">(</span><span class="kt">bool</span><span class="p">);</span>

    <span class="c1">// Destructor</span>
    <span class="k">virtual</span> <span class="o">~</span><span class="n">LED</span><span class="p">();</span>
<span class="p">};</span>
<span class="cp">#endif // LED_H
</span></pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="ledcpp">LED.cpp</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;iostream&gt;
#include &lt;chrono&gt;
#include &lt;thread&gt;
#include "LED.h"
#include "../../Sources/RainbowColors.h"
</span>
<span class="c1">// Overload constructor</span>
<span class="n">LED</span><span class="o">::</span><span class="n">LED</span><span class="p">(</span><span class="kt">int</span> <span class="n">newId</span><span class="p">,</span> <span class="kt">int</span> <span class="n">newMode</span><span class="p">)</span> <span class="o">:</span> <span class="n">GPIO</span><span class="p">(</span><span class="n">newId</span><span class="p">,</span> <span class="n">newMode</span><span class="p">)</span> <span class="p">{}</span>

<span class="cm">/*
  Public method to make a blink on the pin 
  @param int: The desired duration in milliseconds
*/</span>
<span class="kt">void</span> <span class="n">LED</span><span class="o">::</span><span class="n">blink</span><span class="p">(</span><span class="kt">int</span> <span class="n">duration</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">string</span> <span class="n">message</span> 
  <span class="p">{</span>
    <span class="s">"Blinking has been activated with duration of: "</span>
    <span class="o">+</span> <span class="n">to_string</span><span class="p">(</span><span class="n">duration</span><span class="p">)</span> <span class="o">+</span> <span class="s">"ms on pin: "</span> <span class="o">+</span> <span class="n">to_string</span><span class="p">(</span><span class="n">id</span><span class="p">)</span>
  <span class="p">};</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">rainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Pink"</span><span class="p">,</span> <span class="s">"Default"</span><span class="p">,</span> <span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> 
  <span class="n">blinkThread</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="p">(</span><span class="o">&amp;</span><span class="n">LED</span><span class="o">::</span><span class="n">makeBlink</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span> <span class="n">duration</span><span class="p">);</span>
<span class="p">}</span>

<span class="cm">/*
  Private method that contains the routine to blink 
  @param int: The desired duration in milliseconds
*/</span>
<span class="kt">void</span> <span class="n">LED</span><span class="o">::</span><span class="n">makeBlink</span><span class="p">(</span><span class="kt">int</span> <span class="n">duration</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">while</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">stopBlinkFlag</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">HIGH</span><span class="p">);</span>
    <span class="n">delayms</span><span class="p">(</span><span class="n">duration</span><span class="p">);</span>
    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">LOW</span><span class="p">);</span>
    <span class="n">delayms</span><span class="p">(</span><span class="n">duration</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="cm">/*
  Public method to stop the blinking on the pin 
  @param bool: Flag to stop the thread
*/</span>
<span class="kt">void</span> <span class="n">LED</span><span class="o">::</span><span class="n">stopBlink</span> <span class="p">(</span><span class="kt">bool</span> <span class="n">newStopBlinkFlag</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">stopBlinkFlag</span> <span class="o">=</span> <span class="n">newStopBlinkFlag</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/*
    Public method to make a flash on the pin 
    @param int: The desired time ON in milliseconds
    @param int: The desired time OFF in milliseconds
*/</span>
<span class="kt">void</span> <span class="n">LED</span><span class="o">::</span><span class="n">flash</span><span class="p">(</span><span class="kt">int</span> <span class="n">timeOn</span><span class="p">,</span> <span class="kt">int</span> <span class="n">timeOff</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">string</span> <span class="n">message</span> 
  <span class="p">{</span>
    <span class="s">"Flashing has been activated time on: "</span>
    <span class="o">+</span> <span class="n">to_string</span><span class="p">(</span><span class="n">timeOn</span><span class="p">)</span> <span class="o">+</span> <span class="s">"ms and time off: "</span> 
    <span class="o">+</span> <span class="n">to_string</span><span class="p">(</span><span class="n">timeOff</span><span class="p">)</span> <span class="o">+</span> <span class="s">"ms on pin: "</span> <span class="o">+</span> <span class="n">to_string</span><span class="p">(</span><span class="n">id</span><span class="p">)</span>
  <span class="p">};</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">rainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Pink"</span><span class="p">,</span> <span class="s">"Default"</span><span class="p">,</span> <span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> 
  <span class="n">flashThread</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="p">(</span><span class="o">&amp;</span><span class="n">LED</span><span class="o">::</span><span class="n">makeFlash</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span> <span class="n">timeOn</span><span class="p">,</span> <span class="n">timeOff</span><span class="p">);</span>
<span class="p">}</span>

<span class="cm">/*
  Private method that contains the routine to flash
  @param int: The desired time ON in milliseconds
  @param int: The desired time OFF in milliseconds
*/</span>
<span class="kt">void</span> <span class="n">LED</span><span class="o">::</span><span class="n">makeFlash</span><span class="p">(</span><span class="kt">int</span> <span class="n">timeOn</span><span class="p">,</span> <span class="kt">int</span> <span class="n">timeOff</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">while</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">stopFlashFlag</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">HIGH</span><span class="p">);</span>
    <span class="n">delayms</span><span class="p">(</span><span class="n">timeOn</span><span class="p">);</span>
    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">LOW</span><span class="p">);</span>
    <span class="n">delayms</span><span class="p">(</span><span class="n">timeOff</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="cm">/*
  Public method to stop the blinking on the pin 
  @param bool: Flag to stop the thread
*/</span>
<span class="kt">void</span> <span class="n">LED</span><span class="o">::</span><span class="n">stopFlash</span> <span class="p">(</span><span class="kt">bool</span> <span class="n">newStopFlashFlag</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">stopFlashFlag</span> <span class="o">=</span> <span class="n">newStopFlashFlag</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">LED</span><span class="o">::~</span><span class="n">LED</span><span class="p">()</span>
<span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">blinkThread</span><span class="p">.</span><span class="n">joinable</span><span class="p">())</span>
    <span class="n">blinkThread</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">flashThread</span><span class="p">.</span><span class="n">joinable</span><span class="p">())</span>
    <span class="n">flashThread</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="listing_22">Listing_2.2</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;iostream&gt;
#include "GPIO.h"
#include "LED.h"
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">string</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"Main program starting here..."</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">rainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span><span class="s">"Blue"</span><span class="p">,</span> <span class="s">"White"</span><span class="p">,</span> <span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
  
  <span class="n">LED</span> <span class="n">ledPinBlue</span><span class="p">(</span><span class="n">P8_18</span><span class="p">,</span><span class="n">OUTPUT</span><span class="p">);</span>
  <span class="n">LED</span> <span class="n">ledPinWhite</span><span class="p">(</span><span class="n">P8_26</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>

  <span class="n">message</span> <span class="o">=</span> <span class="s">"Start a flashing on a blue led"</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">rainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Blue"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
  <span class="n">ledPinBlue</span><span class="p">.</span><span class="n">flash</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span><span class="mi">500</span><span class="p">);</span>

  <span class="n">message</span> <span class="o">=</span> <span class="s">"Start a flashing on a white led"</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">rainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"White"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
  <span class="n">ledPinWhite</span><span class="p">.</span><span class="n">flash</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">1000</span><span class="p">);</span>

  <span class="kt">char</span> <span class="n">userInput</span> <span class="o">=</span> <span class="sc">'\0'</span><span class="p">;</span>
  <span class="k">while</span> <span class="p">(</span><span class="n">userInput</span> <span class="o">!=</span> <span class="sc">'y'</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">message</span> <span class="o">=</span> <span class="s">"Do you want to stop flashing? Enter 'y' for yes: "</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">rainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Violet"</span><span class="p">);</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">userInput</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">userInput</span> <span class="o">==</span> <span class="sc">'y'</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">ledPinBlue</span><span class="p">.</span><span class="n">stopFlash</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
        <span class="n">ledPinWhite</span><span class="p">.</span><span class="n">stopFlash</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
    
  <span class="n">message</span> <span class="o">=</span> <span class="s">"Main program finishes here..."</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">rainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span><span class="s">"Blue"</span><span class="p">,</span> <span class="s">"White"</span><span class="p">,</span><span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="execution-of-the-program">Execution of the program</h3>
<figure style="text-align: center; width:100%; 
              margin-left: auto; 
              margin-right: auto;">
  <video width="100%" controls="" poster="../assets/images/Post15/VideoCover.png">
    <source src="../assets/images/Post15/Video.mp4" type="video/mp4" />
  </video>
  <figcaption>
    Video: Execution of the program.
  </figcaption>
</figure>

<p>Se you in the next post.</p>
:ET