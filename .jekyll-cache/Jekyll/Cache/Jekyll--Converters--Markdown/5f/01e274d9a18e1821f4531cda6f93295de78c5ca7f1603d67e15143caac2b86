I"ø<p>In this post, I show a script to enable the wifi service automatically at boot in the BeagleBone using connman.</p>

<style>
  /* Three image containers (use 25% for four, and 50% for two, etc) */
  .column {
    float: left;
    width: 46%;
    padding: 2%;
  }

  /* Clear floats after image containers */
  .row::after {
    content: "";
    clear: both;
    display: table;
  }

  img {
    border-radius: 1%;
  }

  video {
    border-radius: 1%;
  }

  p {
    text-align: justify;
  }

  figure {
    text-align: justify;
  }

  .text table, 
  .text th, 
  .text td {
    width: 100%; 
    margin-left: auto; 
    margin-right: auto;
    border: 1px solid black;
    border-collapse: collapse;
    padding-left: 15px;
    padding-right: 15px;
    text-align: center;
  }
</style>

<h2 id="introduction">Introduction</h2>
<p>
  In the Debian Buster IoT image 2020-04-06 the wifi is not enable automatically at boot. The first solution is to disconnect and connect again the usb wifi dongle adapter, unless it is not so comfortable. The second solution is to write a script to disable and enable the wifi service for you when the BeagleBone starts. This is possible through the use of systemd.  
</p>

<h2 id="create-the-file-for-the-commands-to-enable-wifi">Create the file for the commands to enable wifi</h2>
<p>First of all, a file with the instructions, commands or program to be executed needs to be created. For doing that the next instruction can be used:</p>

<p><code class="language-plaintext highlighter-rouge">nano /home/debian/bin/enableWifi.sh</code></p>

<p>In that file, the next commands need to be copied:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="c">#!/bin/bash</span>
connmanctl disable wifi
connmanctl <span class="nb">enable </span>wifi
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="create-the-file-for-the-systemd-service">Create the file for the systemd service</h2>
<p>The location of the systemd service will be in <code class="language-plaintext highlighter-rouge">/etc/systemd/system</code>. In our case, the service will be named as <strong>enableWifi.service</strong>. The command to create the file for the service is:</p>

<p><code class="language-plaintext highlighter-rouge">sudo nano /etc/systemd/system/enableWifi.service</code></p>

<p>In that service file, the next instructions can be copied. The relevant command is the <code class="language-plaintext highlighter-rouge">ExecStartPre=/bin/sleep 30</code> in the Service part. This command will add a delay of 30 seconds before the service will be executed, ensuring that the network and connman interface are loaded and the service will be executed without errors.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="o">[</span>Unit]
<span class="nv">Description</span><span class="o">=</span>Enable wifi after connman service has started
<span class="nv">After</span><span class="o">=</span>multi-user.target

<span class="o">[</span>Service]
<span class="nv">ExecStartPre</span><span class="o">=</span>/bin/sleep 30
<span class="nv">Type</span><span class="o">=</span>idle
<span class="nv">User</span><span class="o">=</span>debian
<span class="nv">Group</span><span class="o">=</span>root
<span class="nv">ExecStart</span><span class="o">=</span>/home/debian/bin/enableWifi.sh
<span class="nv">Restart</span><span class="o">=</span>on-failure
bash

<span class="o">[</span>Install]
<span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="start-and-enable-the-systemd-service">Start and enable the systemd service</h2>
<p>The new service can be started with the next command:</p>

<p><code class="language-plaintext highlighter-rouge">sudo systemctl start enableWifi.service</code></p>

<p>To verify that the script runs correctly:</p>

<p><code class="language-plaintext highlighter-rouge">sudo systemctl status enableWifi.service</code></p>

<p>Next, to execute it automatically at boot, execute the next command:</p>

<p><code class="language-plaintext highlighter-rouge">sudo systemctl enable enableWifi.service</code></p>

<figure style="text-align: center; 
              margin-left: auto; 
              margin-right: auto;">
    <img src="../assets/images/Post56/AppBlocks-SonarGraph-B.png" alt="AppBlocks-SonarGraph-B.png" width="100%" />
  <figcaption>
    Figure 3d: Set of blocks to draw the sonar-like graph.
  </figcaption>
</figure>

<h3 id="movements-control-blocks">Movements Control Blocks</h3>
<p>For controlling the robotâ€™s movements, the app has four sets of blocks which are shown in Figure 3d. Each one of these sets sent a string value with the commandâ€™s name and the desired duration of the movement set with the Slider control.</p>
<figure style="text-align: center; 
              margin-left: auto; 
              margin-right: auto;">
    <img src="../assets/images/Post56/AppBlocks-MotorControl.png" alt="AppBlocks-MotorControl.png" width="100%" />
  <figcaption>
    Figure 3d: Set of blocks for controlling the robot's movements.
  </figcaption>
</figure>

<h2 id="first-test">First Test</h2>

<figure style="text-align: justify;">
  <video width="100%" controls="" poster="../assets/images/Post56/ScreenVideo.png">
    <source src="../assets/images/Post56/MOV_2023-03-26_16-52-01.mov  " type="video/mp4" />
  </video>
  <figcaption>
    Video 1: First running of the 4WD Robot.
  </figcaption>
  </figure>
:ET