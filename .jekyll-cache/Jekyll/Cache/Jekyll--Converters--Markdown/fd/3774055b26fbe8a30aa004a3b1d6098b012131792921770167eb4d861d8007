I"\V<p align="center">
Pink spool icon made by <a href="https://www.flaticon.com/authors/iconixar" title="iconixar">iconixar</a> from <a href="https://www.flaticon.com/" title="Flaticon">www.flaticon.com</a>
</p>

<p>In this post, I show how to drive a DC Motor from the keyboard using the driver <a href="https://www.sparkfun.com/datasheets/Robotics/L298_H_Bridge.pdf">L298N</a> which can drive two DC motors. In practice, this driver can be found in a popular red-colored module that has been designed to make it easy to play and interact with DC motors as this <a href="https://lastminuteengineers.com/l298n-dc-stepper-driver-arduino-tutorial/">tutorial </a> shows.</p>

<p>The remarkable aspect is the use of <font color="red">threads</font> to drive the motor, an aspect that lets the program does some other things at the same time that the motor is running. In the <a href="/Post49-BeagleBone_L298N_Drive/">first entry</a>, dedicated to this driver, you can read about how to drive a motor with it.</p>

<p>It is important to remember that the logic voltage for the BeagleBone is <font color="red">3.3V</font>. If the user provides a greater voltage, the BeagleBone could be damaged.</p>

<h2 id="circuit-and-components">Circuit and components</h2>

<p>The circuit can be seen in Figure 1. It consists of a L298N driver module , a low voltage DC Motor, batteries, and the BeagleBone.</p>

<figure style="text-align: center; 
              margin-left: auto; 
              margin-right: auto;">
    <img src="../assets/images/Post51/Circuit.png" alt="circuit.png" width="100%" />
  <figcaption>
    Figure 1: Circuit to drive a DC motor with the L298N driver.
  </figcaption>
</figure>

<p>The components are:</p>
<ul>
  <li>1 DC Motor driver module L298N</li>
  <li>1 DC Motor 5.0 - 6.0V</li>
  <li>4 AA Batteries o 6 AA rechargeable batteries at 1.2V</li>
  <li>1 Protoboard mini</li>
  <li>Jumpers male-male to make the connections</li>
</ul>

<p>The pins used for control the motor are:</p>
<ul>
  <li>GPIO <strong>P8_12</strong> and <strong>P8_14</strong> to control the motor rotation direction</li>
  <li>PWM <strong>P8_13</strong> to control the speed</li>
</ul>

<h2 id="coding">Coding</h2>

<p>First, a <code class="language-plaintext highlighter-rouge">DCMotor</code> object is declared. For that, <code class="language-plaintext highlighter-rouge">GPIO</code> and ``PWM` objects are declared with global scope to initialize the motor that will be driven.</p>

<p>These objects are named <code class="language-plaintext highlighter-rouge">AIN1 y AIN2</code>, <code class="language-plaintext highlighter-rouge">PWMA</code>. These objects are used to initialize a <code class="language-plaintext highlighter-rouge">DCMotor</code> named <code class="language-plaintext highlighter-rouge">MotorLeft</code> which contains methods to set the speed and the spin direction and to drive or stop the DC motor.</p>

<p>In this <code class="language-plaintext highlighter-rouge">DCMotor</code> object, the user can include a fourth boolean initialization parameter <code class="language-plaintext highlighter-rouge">true/false</code> to invert by software the motor direction rotation instead of inverting the motor’s jumpers physically.</p>

<p>This <code class="language-plaintext highlighter-rouge">DCMotor</code> object is used to initialize the <code class="language-plaintext highlighter-rouge">L298N</code> object. This inheritance structure has the goal to encapsulate the corresponding methods for any generic DC motor avoiding repeat code in the <code class="language-plaintext highlighter-rouge">L298N</code> object and focusing on the methods to <strong>drive / brake</strong> the DC motor, and not only one, but the two motors at the same time and in a different direction if it desired.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="c1">// Declaring the pins for motor</span>
<span class="n">GPIO</span> <span class="nf">AIN1</span> <span class="p">(</span><span class="n">P8_12</span><span class="p">);</span>
<span class="n">GPIO</span> <span class="nf">AIN2</span> <span class="p">(</span><span class="n">P8_14</span><span class="p">);</span>
<span class="n">PWM</span> <span class="nf">PWMA</span> <span class="p">(</span><span class="n">P8_13</span><span class="p">);</span>

<span class="c1">// Declare the motor object</span>
<span class="n">DCMotor</span> <span class="nf">MotorLeft</span> <span class="p">(</span><span class="n">AIN1</span><span class="p">,</span> <span class="n">AIN2</span><span class="p">,</span> <span class="n">PWMA</span><span class="p">);</span>

<span class="c1">// Declare the L298N Module</span>
<span class="n">L298N</span> <span class="nf">myL298NModule</span> <span class="p">(</span><span class="n">MotorLeft</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>In this code, the inherited method <code class="language-plaintext highlighter-rouge">DCMotor::DriveThread</code> is used to create a thread each time the motor is driven. This method is shown in the next listing:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="cm">/*
  Public method to drive the motor during a certain time inside a thread
  @param int: the desired speed (-100,100)
  @param int: The desired duration in milliseconds
  @param STOPMODE &lt;brake / idle&gt;: ACtion on the motor after driving it with &lt;idle&gt; as a default action.     
*/</span>
<span class="kt">void</span> <span class="n">DCMotor</span><span class="o">::</span><span class="n">DriveThread</span><span class="p">(</span><span class="kt">int</span> <span class="n">speed</span><span class="p">,</span> <span class="kt">int</span> <span class="n">duration</span><span class="p">,</span> <span class="n">STOPMODE</span> <span class="n">action</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">motorThread</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="p">(</span><span class="o">&amp;</span><span class="n">DCMotor</span><span class="o">::</span><span class="n">MakeDriveThread</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span> <span class="n">speed</span><span class="p">,</span> <span class="n">duration</span><span class="p">,</span> <span class="n">action</span><span class="p">);</span>
  <span class="n">motorThread</span><span class="p">.</span><span class="n">detach</span><span class="p">();</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The method <code class="language-plaintext highlighter-rouge">DCMotor::MakeDriveThread()</code> takes each thread and calls the method <code class="language-plaintext highlighter-rouge">DCMotor::Drive()</code> to drive the motor at certain speed during certain time and makes the motor to enter in <code class="language-plaintext highlighter-rouge">stop</code> or <code class="language-plaintext highlighter-rouge">idle</code> mode, which is the default, after the movement will be executed. This method is show here:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="cm">/*
  Private method that contains the routine to drive 
  the motor during a certain time
  @param int: the desired speed (-100,100)
  @param int: The desired duration in milliseconds
  @param STOPMODE &lt;brake / idle&gt;: Generic Stop Action on the motor after driving it with &lt;idle&gt; as a default action.      
*/</span>
<span class="kt">void</span> <span class="n">DCMotor</span><span class="o">::</span><span class="n">MakeDriveThread</span><span class="p">(</span><span class="kt">int</span> <span class="n">speed</span><span class="p">,</span> <span class="kt">int</span> <span class="n">duration</span><span class="p">,</span> <span class="n">STOPMODE</span> <span class="n">action</span><span class="p">)</span>
<span class="p">{</span>
  <span class="c1">// Move the motor</span>
  <span class="n">Drive</span><span class="p">(</span><span class="n">speed</span><span class="p">,</span> <span class="n">duration</span><span class="p">);</span>

  <span class="c1">// Set the desired stop action</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">action</span> <span class="o">==</span> <span class="n">idle</span><span class="p">)</span>
    <span class="k">this</span><span class="o">-&gt;</span><span class="n">Stop</span><span class="p">(</span><span class="n">LOW</span><span class="p">,</span> <span class="n">LOW</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
  <span class="k">else</span>
    <span class="k">this</span><span class="o">-&gt;</span><span class="n">Stop</span><span class="p">(</span><span class="n">HIGH</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>On the other hand, in the implementation, the user can change the motor speed using the key “W” and “S” to increase or decrease it, respectively. The library does not let to set a speed beyond the limits of <font color="red">100 and -100</font>. If the user presses the key “Y”, the program finishes.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre><span class="n">message</span> <span class="o">=</span> <span class="s">"Enter an option 'y', 'w', 's': "</span><span class="p">;</span>
<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Blue"</span><span class="p">);</span>
<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">userInput</span><span class="p">;</span>

<span class="c1">// Drive the motors and printing messages on the terminal</span>
<span class="k">switch</span> <span class="p">(</span><span class="n">userInput</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">case</span> <span class="sc">'w'</span><span class="p">:</span>
    <span class="n">motorSpeed</span> <span class="o">+=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">motorSpeed</span> <span class="o">&gt;=</span> <span class="mi">100</span><span class="p">)</span>
      <span class="n">motorSpeed</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
    <span class="k">break</span><span class="p">;</span>
  <span class="k">case</span> <span class="sc">'s'</span><span class="p">:</span>
    <span class="n">motorSpeed</span> <span class="o">-=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">motorSpeed</span> <span class="o">&lt;=</span> <span class="o">-</span><span class="mi">100</span><span class="p">)</span>
      <span class="n">motorSpeed</span> <span class="o">=</span> <span class="o">-</span><span class="mi">100</span><span class="p">;</span>
    <span class="k">break</span><span class="p">;</span>
  <span class="nl">default:</span>
    <span class="k">break</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The inherited class method <code class="language-plaintext highlighter-rouge">DCMotor::DriveThread()</code>, is used to create a thread each time the motor is driven. While the motor is running, a message will be printed on the screen 100 times.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="c1">// Move the motor in a thread</span>
<span class="n">myL298NModule</span><span class="p">.</span><span class="n">MotorA</span><span class="p">.</span><span class="n">DriveThread</span><span class="p">(</span><span class="n">motorSpeed</span><span class="p">,</span> <span class="mi">2000</span><span class="p">);</span>

<span class="c1">// Doing other stuff</span>
<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Doing something else while the motor is running"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The complete code for this application using a <code class="language-plaintext highlighter-rouge">while loop</code> to drive the motor increasing and decreasing the speed until the user press the key “Y” and printing the messages on the screen. This code is shown in the next listing.</p>

<h3 id="l298n_13cpp">L298N_1.3.cpp</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
</pre></td><td class="rouge-code"><pre><span class="cm">/******************************************************************************
L298N_1.3.cpp
@wgaonar
26/03/2022
https://github.com/wgaonar/BeagleCPP

- Drive a motor in a thread and printing messages in the terminal at the same 
  time

Class: L298N
******************************************************************************/</span>
<span class="cp">#include &lt;iostream&gt;
#include "../../../Sources/L298N.h"
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="c1">// Declaring the pins for motor</span>
<span class="n">GPIO</span> <span class="nf">AIN1</span> <span class="p">(</span><span class="n">P8_12</span><span class="p">);</span>
<span class="n">GPIO</span> <span class="nf">AIN2</span> <span class="p">(</span><span class="n">P8_14</span><span class="p">);</span>
<span class="n">PWM</span> <span class="nf">PWMA</span> <span class="p">(</span><span class="n">P8_13</span><span class="p">);</span>

<span class="c1">// Declare the motor object</span>
<span class="n">DCMotor</span> <span class="nf">MotorLeft</span> <span class="p">(</span><span class="n">AIN1</span><span class="p">,</span> <span class="n">AIN2</span><span class="p">,</span> <span class="n">PWMA</span><span class="p">);</span>

<span class="c1">// Declare the L298N Module</span>
<span class="n">L298N</span> <span class="nf">myL298NModule</span> <span class="p">(</span><span class="n">MotorLeft</span><span class="p">);</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">string</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"Main program starting here..."</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span><span class="s">"Blue"</span><span class="p">,</span> <span class="s">"White"</span><span class="p">,</span> <span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

  <span class="n">message</span> <span class="o">=</span> <span class="s">"If you want to stop the program, enter 'y' for yes"</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Blue"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
  <span class="n">message</span> <span class="o">=</span> <span class="s">"Or enter 'w' for increase speed or 's' for decrease it"</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Blue"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

  <span class="kt">int</span> <span class="n">motorSpeed</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="kt">char</span> <span class="n">userInput</span> <span class="o">=</span> <span class="sc">'\0'</span><span class="p">;</span>
  <span class="k">while</span> <span class="p">(</span><span class="n">userInput</span> <span class="o">!=</span> <span class="sc">'y'</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">message</span> <span class="o">=</span> <span class="s">"Enter an option 'y', 'w', 's': "</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Blue"</span><span class="p">);</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">userInput</span><span class="p">;</span>

    <span class="c1">// Drive the motors and printing messages on the terminal</span>
    <span class="k">switch</span> <span class="p">(</span><span class="n">userInput</span><span class="p">)</span>
    <span class="p">{</span>
    <span class="k">case</span> <span class="sc">'w'</span><span class="p">:</span>
      <span class="n">motorSpeed</span> <span class="o">+=</span> <span class="mi">10</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">motorSpeed</span> <span class="o">&gt;=</span> <span class="mi">100</span><span class="p">)</span>
        <span class="n">motorSpeed</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="sc">'s'</span><span class="p">:</span>
      <span class="n">motorSpeed</span> <span class="o">-=</span> <span class="mi">10</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">motorSpeed</span> <span class="o">&lt;=</span> <span class="o">-</span><span class="mi">100</span><span class="p">)</span>
        <span class="n">motorSpeed</span> <span class="o">=</span> <span class="o">-</span><span class="mi">100</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="nl">default:</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Move the motor in a thread</span>
    <span class="n">myL298NModule</span><span class="p">.</span><span class="n">MotorA</span><span class="p">.</span><span class="n">DriveThread</span><span class="p">(</span><span class="n">motorSpeed</span><span class="p">,</span> <span class="mi">2000</span><span class="p">);</span>

    <span class="c1">// Doing other stuff</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Doing something else while the motor is running"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="n">message</span> <span class="o">=</span> <span class="s">"Main program finishes here..."</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span><span class="s">"Blue"</span><span class="p">,</span> <span class="s">"White"</span><span class="p">,</span><span class="s">"Bold"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Se you in the next post.</p>
:ET