I"Ã<p>En este post muestro el circuito, el diagrama de flujo, el c√≥digo y la implementaci√≥n de un programa en lenguaje ensamblador en el microcontrolador <a href="http://ww1.microchip.com/downloads/en/devicedoc/41291f.pdf">PIC 16F886</a> para realizar una temporizaci√≥n que permita cambiar el estado de un LED cada segundo haciendo uso de rutinas de demora tipo <strong>delay</strong></p>

<p>EL prop√≥sito es aplicar las instrucciones de <em>no operation</em>: <strong>NOP</strong>
y de decremento-prueba de un registro: <strong>DECFSZ</strong> para realizar las temporizaciones.</p>

<p>La implementaci√≥n consta de 1 salida por el pin de RB0 conectada a un led para realizar un ciclo de temporizaci√≥n de 1 segundo. La configuraci√≥n es la siguiente:</p>

<ol>
  <li>RB0: 1 segundo ON - 1 segundo OFF</li>
</ol>

<p>Hay que tener en cuenta que la realizaci√≥n las temporizaciones de esta forma es secuencial y restringe el PIC a <strong>no</strong> poder realizar otra tarea mientras se esta ejecutando el programa.</p>

<h2>Configuraci√≥n de entradas y salidas</h2>
<p>La siguiente tabla muestra a detalle los bits utilizados por el programa:</p>

<table class="table table-striped table-hover">
  <thead>
    <tr>
      <th style="text-align: center">Bit</th>
      <th style="text-align: center">Funci√≥n</th>
      <th style="text-align: center">Descripci√≥n</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">RB0</td>
      <td style="text-align: center">Salida</td>
      <td style="text-align: center">Temporizaci√≥n del led</td>
    </tr>
  </tbody>
</table>

<h2>Diagrama el√©ctrico</h2>
<p>El diagrama del circuito respectivo es el que se muestra a continuaci√≥n:</p>
<center>
  <figure>
    <img src="../assets/images/Post03/circuit.png" alt="Circuito de implementaci√≥n" width="960" />
    <figcaption>
      Figura 1: Circuito el√©ctrico.
    </figcaption>
  </figure>
</center>

<h2>Diagrama de flujo</h2>
<p>El diagrama de flujo de la implementaci√≥n se encuentra divido en varias partes, la primera corresponde al <em>programa principal</em>, mientras que las restantes hacen referencia a cada una de las subrutinas para la realizaci√≥n de las temporizaciones mediante demoras <strong>delays</strong>.</p>

<center>
  <figure>
    <img src="../assets/images/Post03/main.png" alt="diagrama de flujo principal" width="200" />
    <figcaption style="font-size: 12pt">
      Figura 2: Diagrama de flujo de la rutina principal
    </figcaption>
  </figure>
</center>
<p><br /></p>

<center>
  <figure>
    <img src="../assets/images/Post03/delay1segundo.png" alt="Rutina de demora de 1 segundo" width="250" />
    <figcaption>
      Figura 3: Rutina de demora de 1 segundo
    </figcaption>
  </figure>
</center>
<p><br /></p>

<center>
  <figure>
    <img src="../assets/images/Post03/delay0.1segundos.png" alt="Rutina de demora de 0.1 segundos" width="250" />
    <figcaption>
      Figura 4: Rutina de demora de 0.1 segundos
    </figcaption>
  </figure>
</center>
<p><br /></p>

<center>
  <figure>
    <img src="../assets/images/Post03/delay1milisegundo.png" alt="Rutina de demora de 1 milisegundo" width="250" />
    <figcaption>
      Figura 5: Rutina de demora de 1 milisegundo
    </figcaption>
  </figure>
</center>

<h2>Programa</h2>
<p>El c√≥digo en lenguage ensamblador es el siguiente:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
</pre></td><td class="rouge-code"><pre>#include "p16f886.inc"
; CONFIG1
; __config 0xEFE5
__CONFIG _CONFIG1, _FOSC_INTRC_CLKOUT &amp; _WDTE_OFF &amp; _PWRTE_ON &amp; _MCLRE_ON &amp; _CP_OFF &amp; _CPD_OFF &amp; _BOREN_ON &amp; _IESO_ON &amp; _FCMEN_ON &amp; _LVP_OFF
; CONFIG2
; __config 0xFFFF
__CONFIG _CONFIG2, _BOR4V_BOR40V &amp; _WRT_OFF
cont0	EQU	20
cont1	EQU	21
cont2	EQU	22
;*******************************************************************************
; Reset Vector
;*******************************************************************************
RES_VECT  CODE    0x0000            ; processor reset vector
  GOTO    START                   ; go to beginning of program
;*******************************************************************************
; MAIN PROGRAM
;*******************************************************************************
MAIN_PROG CODE                      ; let linker place main program
START
  ; TODO Step #5 - Insert Your Program Here
  bsf     STATUS,RP0    ;move to bank 3
  bsf     STATUS,RP1    ;move to bank 3
  clrf    ANSEL         ;PORTA as digital I/O
  bsf     STATUS,RP0    ;move to bank 1
  bcf     STATUS,RP1    ;move to bank 1
  MOVLW   b'11111111'   ;configure porta as input
  MOVWF   TRISA
  MOVLW   b'00000000'   ;configure portb as output
  MOVWF   TRISB
  BCF     STATUS,RP0    ;move to bank 0
  BCF     STATUS,RP1    ;move to bank 0
  CLRF    PORTA
  CLRF    PORTA
main
  bsf     PORTB,RB0
  call    delay2
  bcf     PORTB,RB0
  call    delay2
  goto    main
  
delay0
  movlw   d'250'
  movwf   cont0
d0
  nop
  decfsz  cont0,f
  goto    d0
  return
  
delay1
  movlw   d'100'
  movwf   cont1
d1
  call    delay0
  decfsz  cont1,f
  goto    d1
  return
delay2
  movlw   d'10'
  movwf   cont2
d2
  call    delay1
  decfsz  cont2,f
  goto    d2
  return 
  END
</pre></td></tr></tbody></table></code></pre></div></div>

<h2>Video de la implementaci√≥n</h2>
<center>
  <video width="100%" controls="" poster="../assets/images/Post03/snapShotVideo.png">
  <source src="../assets/images/Post03/video.mp4" type="video/mp4" />
  </video>
</center>
:ET