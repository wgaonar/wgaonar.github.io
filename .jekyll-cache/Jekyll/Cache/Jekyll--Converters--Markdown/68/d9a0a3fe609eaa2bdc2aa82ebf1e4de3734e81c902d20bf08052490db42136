I"Y<p>In this post, I show a Button C++ class implementation in order to read an attached button to a GPIO pin in the BeagleBone Black. The public methods written in the C++ class <code class="language-plaintext highlighter-rouge">BUTTON</code> are:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">int ReadButton()</code></li>
  <li><code class="language-plaintext highlighter-rouge">int WaitForButton()</code></li>
  <li><code class="language-plaintext highlighter-rouge">int WaitForButton(int)</code></li>
  <li><code class="language-plaintext highlighter-rouge">int WhenButtonWasPressed(callbackType)</code></li>
  <li><code class="language-plaintext highlighter-rouge">void StopWaitForButton()</code></li>
</ul>

<p>The <code class="language-plaintext highlighter-rouge">int ReadButton()</code> method checks that the GPIO has been set up as <code class="language-plaintext highlighter-rouge">INPUT</code> and returns the value of the pin that is attached to the button. This is done through a call to the <code class="language-plaintext highlighter-rouge">DigitalRead()</code> method of the GPIO class.</p>

<p>The <code class="language-plaintext highlighter-rouge">int WaitForButton()</code> first checks if the GPIO attached to a button has been set up as <code class="language-plaintext highlighter-rouge">INPUT</code> and then wait until the button has changed from a <code class="language-plaintext highlighter-rouge">LOW</code> state to a <code class="language-plaintext highlighter-rouge">HIGH</code> state. This means the button has been pressed.</p>

<p>The <code class="language-plaintext highlighter-rouge">int WaitForButton(int)</code> is an overload method, its receives <span style="color: red;font-weight: bold;">one</span> of the next types of transition on the pin:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">RISING</code></li>
  <li><code class="language-plaintext highlighter-rouge">FALLING</code></li>
  <li><code class="language-plaintext highlighter-rouge">BOTH</code></li>
</ul>

<p>The <code class="language-plaintext highlighter-rouge">int WhenButtonWasPressed(callbackType)</code> method, receives a user customized function when the button has been pressed and creates a thread with a function pointer to that function which is executed in a <strong>parallel</strong> way to the main function in the program. In this user customized function any other methods of the class can be called, for example: <code class="language-plaintext highlighter-rouge">WaitForButton()</code> without affect the behavior of the main function.</p>

<p>The <code class="language-plaintext highlighter-rouge">void StopWaitForButton()</code> controls the execution of the <code class="language-plaintext highlighter-rouge">WaitForButton()</code> method. This is done through the bool member variable  <code class="language-plaintext highlighter-rouge">stopWaitForButtonFlag</code> that can be set with a the right timing to stop that method.</p>

<h2 id="code">Code</h2>

<h3 id="buttonh">BUTTON.h</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
</pre></td><td class="rouge-code"><pre><span class="cp">#ifndef BUTTON_H
#define BUTTON_H
</span>
<span class="cp">#include &lt;thread&gt;
#include "GPIO.h"
</span>
<span class="cm">/* 
  Declare a type for a function pointer
  It is the construct for: using function_type = int (*) ()
    function_type:  the function name
    int: return type  
    (*): the dereference operator due to the adddress of the function name
    (): the arguments of the function, in this case void
  Stores the address of a function 
*/</span>
<span class="k">using</span> <span class="n">callbackType</span> <span class="o">=</span> <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="p">)();</span>

<span class="k">class</span> <span class="nc">BUTTON</span> <span class="o">:</span> <span class="k">public</span> <span class="n">GPIO</span>
<span class="p">{</span>
  <span class="nl">private:</span>
    <span class="kt">int</span> <span class="n">valueOnPin</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">previousValueOnPin</span><span class="p">;</span> 
    <span class="kt">bool</span> <span class="n">stopWaitForButtonFlag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>

    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">whenButtonWasPressedThread</span><span class="p">;</span> 

  <span class="nl">public:</span>
    <span class="c1">// Overload constructor</span>
    <span class="n">BUTTON</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>

    <span class="c1">// Interface method to get the GPIO pin state</span>
    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">ReadButton</span><span class="p">();</span>

    <span class="c1">// Method for wait for a press on a button with default rising edge</span>
    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">WaitForButton</span><span class="p">();</span>

    <span class="c1">// Overloaded Method for wait for a press on a button with an Edge</span>
    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">WaitForButton</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>

    <span class="c1">// Method to do execute an user function when the button will be pressed</span>
    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">WhenButtonWasPressed</span><span class="p">(</span><span class="n">callbackType</span><span class="p">);</span>

    <span class="c1">// Method to stop the function executed whe the button was pressed</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">StopWaitForButton</span><span class="p">(</span><span class="kt">bool</span><span class="p">);</span>

    <span class="c1">// Destructor</span>
    <span class="o">~</span><span class="n">BUTTON</span><span class="p">();</span>
<span class="p">};</span>

<span class="cp">#endif // BUTTON_H
</span></pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="buttoncpp">BUTTON.cpp</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;iostream&gt;
#include &lt;chrono&gt;
#include &lt;thread&gt;
</span>
<span class="cp">#include "BUTTON.h"
</span>
<span class="c1">// Overload constructor</span>
<span class="n">BUTTON</span><span class="o">::</span><span class="n">BUTTON</span><span class="p">(</span><span class="kt">int</span> <span class="n">newId</span><span class="p">)</span> <span class="o">:</span> <span class="n">GPIO</span><span class="p">(</span><span class="n">newId</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">)</span> <span class="p">{}</span>

<span class="cm">/*
    Public method for reading the input from a button
    @return int:   The button state HIGH / LOW
                  -1 Error in the pin's mode
*/</span>
<span class="kt">int</span> <span class="n">BUTTON</span><span class="o">::</span><span class="n">ReadButton</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">mode</span> <span class="o">!=</span> <span class="n">INPUT</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">perror</span><span class="p">(</span><span class="s">"'ReadButton' method only works on INPUT mode"</span><span class="p">);</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">valueOnPin</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">DigitalRead</span><span class="p">();</span>
    <span class="k">return</span> <span class="n">valueOnPin</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/*
    Public method for waiting a rising edge on the press of a button
    @return int:   1 The button was pressed
                  0 The button was not pressed
                  -1 Error in the pin's mode
*/</span>
<span class="kt">int</span> <span class="n">BUTTON</span><span class="o">::</span><span class="n">WaitForButton</span><span class="p">()</span>
<span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">mode</span> <span class="o">!=</span> <span class="n">INPUT</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">perror</span><span class="p">(</span><span class="s">"'waitForButton' method only works on INPUT mode"</span><span class="p">);</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="n">string</span> <span class="n">message</span><span class="p">;</span>

  <span class="n">WriteFile</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s">"edge"</span><span class="p">,</span> <span class="s">"rising"</span><span class="p">);</span>
  <span class="k">while</span> <span class="p">(</span><span class="n">stopWaitForButtonFlag</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">previousValueOnPin</span> <span class="o">=</span> <span class="n">ReadButton</span><span class="p">();</span> 
    <span class="k">if</span> <span class="p">(</span><span class="n">previousValueOnPin</span> <span class="o">==</span> <span class="n">LOW</span><span class="p">)</span>
      <span class="k">break</span><span class="p">;</span> 
  <span class="p">}</span>
  <span class="k">while</span> <span class="p">(</span><span class="n">stopWaitForButtonFlag</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ReadButton</span><span class="p">()</span> <span class="o">==</span> <span class="n">HIGH</span><span class="p">)</span>
      <span class="k">break</span><span class="p">;</span> 
  <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">previousValueOnPin</span> <span class="o">!=</span> <span class="n">valueOnPin</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">message</span> <span class="o">=</span> <span class="s">"A RISING edge was detected!"</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Pink"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/*
  Public overloaded method for waiting a specific type edge on the press of a button
  @param int: The desired edge type RISING / FALLING / BOTH
  @return int:  1 The button was pressed
                0 The button was not pressed
                -1 Error in the pin's mode
*/</span>
<span class="kt">int</span> <span class="n">BUTTON</span><span class="o">::</span><span class="n">WaitForButton</span><span class="p">(</span><span class="kt">int</span> <span class="n">edge</span> <span class="o">=</span> <span class="n">RISING</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">mode</span> <span class="o">!=</span> <span class="n">INPUT</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">perror</span><span class="p">(</span><span class="s">"'waitForButton' method only works on INPUT mode"</span><span class="p">);</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="n">string</span> <span class="n">message</span><span class="p">;</span>
  <span class="k">switch</span> <span class="p">(</span><span class="n">edge</span><span class="p">)</span>
  <span class="p">{</span>
  <span class="k">case</span> <span class="n">RISING</span><span class="p">:</span>
    <span class="n">WriteFile</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s">"edge"</span><span class="p">,</span> <span class="s">"rising"</span><span class="p">);</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">stopWaitForButtonFlag</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">previousValueOnPin</span> <span class="o">=</span> <span class="n">ReadButton</span><span class="p">();</span> 
      <span class="k">if</span> <span class="p">(</span><span class="n">previousValueOnPin</span> <span class="o">==</span> <span class="n">LOW</span><span class="p">)</span>
        <span class="k">break</span><span class="p">;</span> 
    <span class="p">}</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">stopWaitForButtonFlag</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">ReadButton</span><span class="p">()</span> <span class="o">==</span> <span class="n">HIGH</span><span class="p">)</span>
        <span class="k">break</span><span class="p">;</span> 
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">previousValueOnPin</span> <span class="o">!=</span> <span class="n">valueOnPin</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">message</span> <span class="o">=</span> <span class="s">"A RISING edge was detected!"</span><span class="p">;</span>
      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Pink"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">break</span><span class="p">;</span>
  <span class="k">case</span> <span class="n">FALLING</span><span class="p">:</span>
    <span class="n">WriteFile</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s">"edge"</span><span class="p">,</span> <span class="s">"falling"</span><span class="p">);</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">stopWaitForButtonFlag</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">previousValueOnPin</span> <span class="o">=</span> <span class="n">ReadButton</span><span class="p">();</span> 
      <span class="k">if</span> <span class="p">(</span><span class="n">previousValueOnPin</span> <span class="o">==</span> <span class="n">HIGH</span><span class="p">)</span>
        <span class="k">break</span><span class="p">;</span> 
    <span class="p">}</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">stopWaitForButtonFlag</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">ReadButton</span><span class="p">()</span> <span class="o">==</span> <span class="n">LOW</span><span class="p">)</span>
        <span class="k">break</span><span class="p">;</span> 
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">previousValueOnPin</span> <span class="o">!=</span> <span class="n">valueOnPin</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">message</span> <span class="o">=</span> <span class="s">"A FALLING edge was detected!"</span><span class="p">;</span>
      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Pink"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">break</span><span class="p">;</span>
  <span class="k">case</span> <span class="n">BOTH</span><span class="p">:</span>
    <span class="n">WriteFile</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s">"edge"</span><span class="p">,</span> <span class="s">"both"</span><span class="p">);</span>
    <span class="n">previousValueOnPin</span> <span class="o">=</span> <span class="n">ReadButton</span><span class="p">();</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">stopWaitForButtonFlag</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">previousValueOnPin</span> <span class="o">!=</span> <span class="n">ReadButton</span><span class="p">())</span>
      <span class="p">{</span>
        <span class="n">message</span> <span class="o">=</span> <span class="s">"A RISING OR FALLING edge was detected!"</span><span class="p">;</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Yellow"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">break</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/*
    Public callback method to do something when a button will be pressed
    @param callbackType: user function to execute
    @return int: 1 the user function was called
                -1 Error in the pin's mode
*/</span>
<span class="kt">int</span> <span class="n">BUTTON</span><span class="o">::</span><span class="n">WhenButtonWasPressed</span><span class="p">(</span><span class="n">callbackType</span> <span class="n">callbackFunction</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">mode</span> <span class="o">!=</span> <span class="n">INPUT</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">perror</span><span class="p">(</span><span class="s">"'waitForButton' method only works on INPUT mode"</span><span class="p">);</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="n">string</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"'WhenButtonWasPressed' method has been activated!!!"</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">RainbowText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">"Orange"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

  <span class="n">whenButtonWasPressedThread</span> <span class="o">=</span> <span class="kr">thread</span><span class="p">(</span><span class="n">callbackFunction</span><span class="p">);</span>

  <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/*
    Public method to stop function executed whe the button was pressed
    @param bool: Flag to stop the thread
*/</span>
<span class="kt">void</span> <span class="n">BUTTON</span><span class="o">::</span><span class="n">StopWaitForButton</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">stopWaitForButtonFlag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// Destructor</span>
<span class="n">BUTTON</span><span class="o">::~</span><span class="n">BUTTON</span><span class="p">()</span>
<span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">whenButtonWasPressedThread</span><span class="p">.</span><span class="n">joinable</span><span class="p">())</span>
    <span class="n">whenButtonWasPressedThread</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Se you in the next post.</p>
:ET